{"version":3,"sources":["components/common/CardHeader/CardHeader.js","components/common/CardBody/CardBody.js","components/ButtonSelectorNode/ButtonSelectorNode.js","constants/constants.js","views/home/HomePage.js"],"names":["CardHeader","props","handleSave","hasPreviewButton","children","rest","history","useHistory","className","disableRipple","variant","onClick","push","pathname","CardBody","useState","showMore","setShowMore","type","listItems","nodeId","selectedId","onFocusId","handleSelect","length","filter","x","includes","id","map","item","startIcon","name","endIcon","memo","data","isConnectable","selectedElements","useStoreState","store","focusNodeAction","label","event","disabled","btnLabel","e","btnAction","stopPropagation","conditions","c","i","Fragment","handleDeleteCondition","actions","a","value","handleDeleteAction","btnLabel2","btnAction2","position","style","bottom","top","background","EVENTS","CONDITIONS","ACTIONS","nodeTypes","btnSelectorNode","ButtonSelectorNode","HomePage","showDrawer","setShowDrawer","selectedNode","setSelectedNode","selectedEvent","setSelectedEvent","selectedCondition","setSelectedCondition","selectedAction","setSelectedAction","clickedAction","setClickedAction","initialElements","y","elements","setElements","elementsStateRef","useRef","current","selectedNodeStateRef","selConditionStateRef","selActionStateRef","generateNextStepNodeObj","tempElems","Object","assign","t","Number","toString","itemId","source","target","tempElemIndex","findIndex","fullHeight","color","find","prev","fullWidth","margin","onChange","variatn","nodes","el","outputArr","forEach","node","condition","console","log","elementsSelectable","onElementsRemove","elementsToRemove","els","removeElements","onConnect","params","addEdge","deleteKeyCode","onSelectionChange"],"mappings":"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","file":"static/js/4.e14ad4e0.chunk.js","sourcesContent":["import React from \"react\";\r\nimport InfoOutlinedIcon from \"@material-ui/icons/InfoOutlined\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nimport \"./CardHeader.scss\";\r\n\r\nconst CardHeader = props => {\r\n  const { handleSave, hasPreviewButton, children, ...rest } = props;\r\n  const history = useHistory();\r\n\r\n  const navToPreview = () => {\r\n    history.push({ pathname: \"/preview\" });\r\n  };\r\n  return (\r\n    <div className={`CardHeader`} {...rest}>\r\n      <div className=\"left-section\">\r\n        {children}\r\n        <IconButton disableRipple>\r\n          <InfoOutlinedIcon />\r\n        </IconButton>\r\n      </div>\r\n      <div className=\"d-flex\">\r\n        {hasPreviewButton && (\r\n          <Button variant=\"text\" className=\"btn-preview\" onClick={navToPreview}>\r\n            Go to Preview\r\n          </Button>\r\n        )}\r\n        {handleSave && (\r\n          <Button variant=\"contained\" onClick={handleSave}>\r\n            Save\r\n          </Button>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport { CardHeader };\r\n","import React, { useState } from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport AddBoxOutlinedIcon from \"@material-ui/icons/AddBoxOutlined\";\r\nimport KeyboardArrowUpOutlinedIcon from \"@material-ui/icons/KeyboardArrowUpOutlined\";\r\nimport KeyboardArrowDownOutlinedIcon from \"@material-ui/icons/KeyboardArrowDownOutlined\";\r\nimport \"./CardBody.scss\";\r\n\r\nconst CardBody = props => {\r\n  const [showMore, setShowMore] = useState(false);\r\n  const {\r\n    type,\r\n    listItems,\r\n    nodeId,\r\n    selectedId,\r\n    onFocusId,\r\n    handleSelect,\r\n    ...rest\r\n  } = props;\r\n  return (\r\n    <>\r\n      <div\r\n        className={`CardBody ${listItems.length > 3 ? \"has-show-more\" : \"\"} ${\r\n          showMore ? \"show-all\" : \"\"\r\n        }`}\r\n        {...rest}\r\n      >\r\n        {(type === \"actions\" || type === \"conditions\"\r\n          ? listItems.filter(x => !selectedId[nodeId]?.includes(x.id))\r\n          : listItems.filter(x => !selectedId.includes(x.id))\r\n        ).map(item => (\r\n          <Button\r\n            key={item.id}\r\n            onClick={() => handleSelect(item.id)}\r\n            disableRipple\r\n            variant=\"text\"\r\n            className={`btn-card-item ${\r\n              onFocusId === item.id ? \"on-focus\" : \"\"\r\n            }`}\r\n            startIcon={<AddBoxOutlinedIcon />}\r\n          >\r\n            {item.name}\r\n          </Button>\r\n        ))}\r\n      </div>\r\n      {listItems.length > 3 && (\r\n        <div className=\"btn-show-more\">\r\n          <Button\r\n            onClick={() => setShowMore(!showMore)}\r\n            variant=\"text\"\r\n            disableRipple\r\n            endIcon={\r\n              showMore ? (\r\n                <KeyboardArrowUpOutlinedIcon />\r\n              ) : (\r\n                <KeyboardArrowDownOutlinedIcon />\r\n              )\r\n            }\r\n          >\r\n            Show {showMore ? \"less\" : \"more\"}\r\n          </Button>\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport { CardBody };\r\n","import React, { memo } from \"react\";\r\n\r\nimport { Handle, useStoreState } from \"react-flow-renderer\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport HighlightOffIcon from \"@material-ui/icons/HighlightOff\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\n\r\nimport \"./ButtonSelectorNode.scss\";\r\n\r\nexport default memo(({ id, data, isConnectable }) => {\r\n  const selectedElements = useStoreState(store => store.selectedElements);\r\n\r\n  return (\r\n    <div\r\n      className={`ButtonSelectorNode ${\r\n        selectedElements && selectedElements[0].id === id ? \"is-selected\" : \"\"\r\n      }`}\r\n      onClick={() => data.focusNodeAction()}\r\n    >\r\n      <div>\r\n        <Typography variant=\"body1\">{data.label}</Typography>\r\n      </div>\r\n      {data.type === \"event\" &&\r\n        (data.event ? (\r\n          <Button variant=\"contained\" disabled className=\"lbl-event\">\r\n            {data.event.name}\r\n          </Button>\r\n        ) : (\r\n          data.btnLabel && (\r\n            <Button\r\n              onClick={e => {\r\n                data.btnAction();\r\n                e.stopPropagation();\r\n              }}\r\n              variant=\"contained\"\r\n            >\r\n              {data.btnLabel}\r\n            </Button>\r\n          )\r\n        ))}\r\n\r\n      {(data.type === \"condition\" || data.type === \"choice\") &&\r\n        (data.conditions?.length > 0\r\n          ? data.conditions.map((c, i) => (\r\n              <React.Fragment key={c.id}>\r\n                <div className=\"label-div\">\r\n                  <Button\r\n                    variant=\"contained\"\r\n                    disabled\r\n                    className=\"lbl-condition\"\r\n                  >\r\n                    {c.name}\r\n                  </Button>\r\n                  <IconButton\r\n                    disableRipple\r\n                    onClick={() => data.handleDeleteCondition(c.id)}\r\n                  >\r\n                    <HighlightOffIcon />\r\n                  </IconButton>\r\n                  {i !== data.conditions.length - 1 && (\r\n                    <Typography variant=\"h6\">AND</Typography>\r\n                  )}\r\n                </div>\r\n              </React.Fragment>\r\n            ))\r\n          : data.btnLabel && (\r\n              <Button\r\n                onClick={e => {\r\n                  data.btnAction();\r\n                  e.stopPropagation();\r\n                }}\r\n                variant=\"contained\"\r\n              >\r\n                {data.btnLabel}\r\n              </Button>\r\n            ))}\r\n\r\n      {/* type === 'action' || type === 'action-yes' */}\r\n      {data.type.includes(\"action\") &&\r\n        (data.actions?.length > 0\r\n          ? data.actions.map((a, i) => (\r\n              <React.Fragment key={a.id}>\r\n                <div className=\"label-div\">\r\n                  <Button variant=\"contained\" disabled className=\"lbl-action\">\r\n                    {a.name} - {a.value}\r\n                  </Button>\r\n                  <IconButton\r\n                    disableRipple\r\n                    onClick={() => data.handleDeleteAction(a.id)}\r\n                  >\r\n                    <HighlightOffIcon />\r\n                  </IconButton>\r\n                  {i !== data.actions.length - 1 && (\r\n                    <Typography variant=\"h6\">AND</Typography>\r\n                  )}\r\n                </div>\r\n              </React.Fragment>\r\n            ))\r\n          : data.btnLabel && (\r\n              <Button\r\n                onClick={e => {\r\n                  data.btnAction();\r\n                  e.stopPropagation();\r\n                }}\r\n                variant=\"contained\"\r\n              >\r\n                {data.btnLabel}\r\n              </Button>\r\n            ))}\r\n\r\n      {data.type === \"choice\" && (\r\n        <Typography variant=\"h6\" className=\"text-or\">\r\n          OR\r\n        </Typography>\r\n      )}\r\n\r\n      {data.btnLabel2 && (\r\n        <Button\r\n          onClick={e => {\r\n            data.btnAction2();\r\n            e.stopPropagation();\r\n          }}\r\n          variant=\"contained\"\r\n        >\r\n          {data.btnLabel2}\r\n        </Button>\r\n      )}\r\n\r\n      <Handle\r\n        type=\"source\"\r\n        position=\"bottom\"\r\n        style={{ bottom: 10, top: \"auto\", background: \"#555\" }}\r\n        isConnectable={isConnectable}\r\n      />\r\n    </div>\r\n  );\r\n});\r\n","export const EVENTS = [\r\n  { id: 1, name: \"New order placed\" },\r\n  { id: 2, name: \"New signup\" },\r\n  { id: 3, name: \"New subscriber\" },\r\n  { id: 4, name: \"New cancellation\" }\r\n];\r\n\r\nexport const CONDITIONS = [\r\n  { id: 1, name: \"Amount > 100\" },\r\n  { id: 2, name: \"Amount < 100\" },\r\n  { id: 3, name: \"Product is Coffee\" },\r\n  { id: 4, name: \"Product is Tea\" },\r\n  { id: 5, name: \"Date > Today\" },\r\n  { id: 6, name: \"Date < Today\" }\r\n];\r\nexport const ACTIONS = [\r\n  {\r\n    id: 1,\r\n    name: \"Send email to Contact\",\r\n    type: \"email\",\r\n    label: \"Email address\"\r\n  },\r\n  { id: 2, name: \"Call Contact\", type: \"tel\", label: \"Contact Number\" },\r\n  { id: 3, name: \"Add Tag to Contact\", type: \"tel\", label: \"Contact Number\" },\r\n  { id: 4, name: \"Remove Contact\", type: \"tel\", label: \"Contact Number\" }\r\n];\r\n","import React, { useState, useRef } from \"react\";\r\nimport ReactFlow, { removeElements, addEdge } from \"react-flow-renderer\";\r\n\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport { Background } from \"components/common/Background/Background\";\r\nimport { CardHeader } from \"components/common/CardHeader/CardHeader\";\r\nimport { CardBody } from \"components/common/CardBody/CardBody\";\r\nimport ButtonSelectorNode from \"components/ButtonSelectorNode/ButtonSelectorNode\";\r\nimport { ACTIONS, CONDITIONS, EVENTS } from \"constants/constants\";\r\n\r\nimport \"./HomePage.scss\";\r\n\r\nconst nodeTypes = {\r\n  btnSelectorNode: ButtonSelectorNode\r\n};\r\n\r\nfunction HomePage() {\r\n  const [showDrawer, setShowDrawer] = useState(\"events\");\r\n  const [selectedNode, setSelectedNode] = useState(\"1\");\r\n  const [selectedEvent, setSelectedEvent] = useState([]);\r\n  const [selectedCondition, setSelectedCondition] = useState({});\r\n  const [selectedAction, setSelectedAction] = useState({});\r\n  const [clickedAction, setClickedAction] = useState(null);\r\n\r\n  const initialElements = [\r\n    {\r\n      id: \"1\",\r\n      type: \"btnSelectorNode\",\r\n      data: {\r\n        label: \"When\",\r\n        type: \"event\",\r\n        btnLabel: \"Select event trigger\",\r\n        focusNodeAction: () => {\r\n          setShowDrawer(\"events\");\r\n          setSelectedNode(\"1\");\r\n        },\r\n        btnAction: () => {\r\n          setShowDrawer(\"events\");\r\n          setSelectedNode(\"1\");\r\n        }\r\n      },\r\n      position: { x: 250, y: 25 }\r\n    }\r\n  ];\r\n  const [elements, setElements] = useState(initialElements);\r\n  const onElementsRemove = elementsToRemove =>\r\n    setElements(els => removeElements(elementsToRemove, els));\r\n  const onConnect = params => setElements(els => addEdge(params, els));\r\n  const elementsStateRef = useRef();\r\n  elementsStateRef.current = elements;\r\n  const selectedNodeStateRef = useRef();\r\n  selectedNodeStateRef.current = selectedNode;\r\n  const selConditionStateRef = useRef();\r\n  selConditionStateRef.current = selectedCondition;\r\n  const selActionStateRef = useRef();\r\n  selActionStateRef.current = selectedAction;\r\n\r\n  const generateNextStepNodeObj = (nodeId, position) => {\r\n    return {\r\n      label: `Next Step`,\r\n      type: \"choice\",\r\n      btnLabel: \"Add condition\",\r\n      focusNodeAction: () => {\r\n        setShowDrawer(null);\r\n        setSelectedNode(nodeId);\r\n      },\r\n      btnAction: () => {\r\n        setShowDrawer(\"conditions\");\r\n        setSelectedNode(nodeId);\r\n\r\n        let tempElems = Object.assign([], elementsStateRef.current);\r\n        tempElems = tempElems.filter(\r\n          t =>\r\n            t.id !== nodeId &&\r\n            t.id !== `edges-${(Number(nodeId) - 1).toString()}-${nodeId}`\r\n        );\r\n        tempElems.push(\r\n          {\r\n            id: nodeId, // 2\r\n            type: \"btnSelectorNode\",\r\n            data: {\r\n              label: `If...`,\r\n              type: \"condition\",\r\n              btnLabel: \"Add condition\",\r\n              focusNodeAction: () => {\r\n                setShowDrawer(\"conditions\");\r\n                setSelectedNode(nodeId);\r\n              },\r\n              btnAction: () => {\r\n                setShowDrawer(\"conditions\");\r\n                setSelectedNode(nodeId);\r\n              },\r\n              handleDeleteCondition: itemId =>\r\n                handleDeleteCondition(nodeId, itemId)\r\n            },\r\n            position: position\r\n          },\r\n          {\r\n            id: (Number(nodeId) + 1).toString(), // 3\r\n            type: \"btnSelectorNode\",\r\n            data: {\r\n              label: `Then...`,\r\n              type: \"action-yes\",\r\n              btnLabel: \"Add action\",\r\n              focusNodeAction: () => {\r\n                setShowDrawer(\"actions\");\r\n                setSelectedNode((Number(nodeId) + 1).toString());\r\n              },\r\n              btnAction: () => {\r\n                setShowDrawer(\"actions\");\r\n                setSelectedNode((Number(nodeId) + 1).toString());\r\n              },\r\n              handleDeleteAction: itemId =>\r\n                handleDeleteAction((Number(nodeId) + 1).toString(), itemId)\r\n            },\r\n            position: { x: position.x, y: position.y + 400 }\r\n          },\r\n          {\r\n            id: (Number(nodeId) + 2).toString(), // 4\r\n            type: \"btnSelectorNode\",\r\n            data: generateNextStepNodeObj((Number(nodeId) + 2).toString(), {\r\n              x: position.x + 300,\r\n              y: position.y + 150\r\n            }),\r\n            position: { x: position.x + 300, y: position.y + 150 }\r\n          },\r\n          ...(nodeId === \"2\"\r\n            ? [\r\n                {\r\n                  id: `edges-${(Number(nodeId) - 1).toString()}-${nodeId}`, // edges-1-2\r\n                  source: (Number(nodeId) - 1).toString(),\r\n                  target: nodeId,\r\n                  type: \"smoothstep\"\r\n                }\r\n              ]\r\n            : []),\r\n          {\r\n            id: `edges-${nodeId}-${(Number(nodeId) + 1).toString()}`, // edges-2-3\r\n            source: nodeId,\r\n            target: (Number(nodeId) + 1).toString(),\r\n            type: \"smoothstep\",\r\n            label: \"yes\"\r\n          },\r\n          {\r\n            id: `edges-${nodeId}-${(Number(nodeId) + 2).toString()}`, // edges-2-4\r\n            source: nodeId,\r\n            target: (Number(nodeId) + 2).toString(),\r\n            type: \"smoothstep\",\r\n            label: \"no\"\r\n          }\r\n        );\r\n        setElements(tempElems);\r\n      },\r\n      btnLabel2: \"Add Action\",\r\n      btnAction2: () => {\r\n        setShowDrawer(\"actions\");\r\n        setSelectedNode(nodeId);\r\n\r\n        let tempElems = Object.assign([], elementsStateRef.current);\r\n        tempElems = tempElems.filter(\r\n          t =>\r\n            t.id !== nodeId &&\r\n            t.id !== `edges-${(Number(nodeId) - 1).toString()}-${nodeId}` // edges-1-2\r\n        );\r\n        tempElems.push(\r\n          {\r\n            id: nodeId,\r\n            type: \"btnSelectorNode\",\r\n            data: {\r\n              label: `Then...`,\r\n              type: \"action\",\r\n              btnLabel: \"Add action\",\r\n              focusNodeAction: () => {\r\n                setShowDrawer(\"actions\");\r\n                setSelectedNode(nodeId);\r\n              },\r\n              btnAction: () => {\r\n                setShowDrawer(\"actions\");\r\n                setSelectedNode(nodeId);\r\n              },\r\n              handleDeleteAction: itemId => handleDeleteAction(nodeId, itemId)\r\n            },\r\n            position: position\r\n          },\r\n          ...(nodeId === \"2\"\r\n            ? [\r\n                {\r\n                  id: `edges-${(Number(nodeId) - 1).toString()}-${nodeId}`, // edges-1-2\r\n                  source: (Number(nodeId) - 1).toString(),\r\n                  target: nodeId,\r\n                  type: \"smoothstep\"\r\n                }\r\n              ]\r\n            : [])\r\n        );\r\n\r\n        setElements(tempElems);\r\n      },\r\n      handleDeleteCondition: itemId => handleDeleteCondition(nodeId, itemId)\r\n    };\r\n  };\r\n\r\n  const handleEventChange = id => {\r\n    setSelectedEvent([id]);\r\n    let tempElems = Object.assign([], elements);\r\n    tempElems[0] = {\r\n      id: \"1\",\r\n      type: \"btnSelectorNode\",\r\n      data: {\r\n        label: \"When\",\r\n        type: \"event\",\r\n        event: EVENTS.find(e => e.id === id),\r\n        focusNodeAction: () => {\r\n          setShowDrawer(\"events\");\r\n          setSelectedNode(\"1\");\r\n        },\r\n        btnAction: () => {\r\n          setShowDrawer(\"events\");\r\n          setSelectedNode(\"1\");\r\n        }\r\n      },\r\n      position: { x: 250, y: 25 }\r\n    };\r\n\r\n    if (tempElems.length === 1) {\r\n      tempElems.push(\r\n        {\r\n          id: \"2\",\r\n          type: \"btnSelectorNode\",\r\n          data: generateNextStepNodeObj(\"2\", { x: 250, y: 200 }),\r\n          position: { x: 250, y: 200 }\r\n        },\r\n        {\r\n          id: \"edges-1-2\",\r\n          source: \"1\",\r\n          target: \"2\",\r\n          type: \"smoothstep\"\r\n        }\r\n      );\r\n    }\r\n    setShowDrawer(null);\r\n    setElements(tempElems);\r\n  };\r\n\r\n  const handleConditionChange = id => {\r\n    setSelectedCondition(prev => ({\r\n      ...prev,\r\n      [selectedNode]: [...(selectedCondition[selectedNode] || []), id]\r\n    }));\r\n    let tempElems = Object.assign([], elements);\r\n    let tempElemIndex = tempElems.findIndex(t => t.id === selectedNode);\r\n    tempElems[tempElemIndex] = {\r\n      ...tempElems[tempElemIndex],\r\n      data: {\r\n        ...tempElems[tempElemIndex].data,\r\n        conditions: [\r\n          ...(tempElems[tempElemIndex].data?.conditions || []),\r\n          CONDITIONS.find(e => e.id === id)\r\n        ]\r\n      }\r\n    };\r\n    setElements(tempElems);\r\n  };\r\n\r\n  const handleActionChange = id => {\r\n    setClickedAction(ACTIONS.find(a => a.id === id));\r\n  };\r\n\r\n  const handleAddAction = () => {\r\n    setSelectedAction(prev => ({\r\n      ...prev,\r\n      [selectedNode]: [\r\n        ...(selectedAction[selectedNode] || []),\r\n        clickedAction.id\r\n      ]\r\n    }));\r\n    let tempElems = Object.assign([], elements);\r\n    let tempElemIndex = tempElems.findIndex(t => t.id === selectedNode);\r\n    tempElems[tempElemIndex] = {\r\n      ...tempElems[tempElemIndex],\r\n      data: {\r\n        ...tempElems[tempElemIndex].data,\r\n        actions: [\r\n          ...(tempElems[tempElemIndex].data?.actions || []),\r\n          clickedAction\r\n        ]\r\n      }\r\n    };\r\n    setElements(tempElems);\r\n  };\r\n\r\n  const handleDeleteCondition = (nodeId, itemId) => {\r\n    let tempElems = Object.assign([], elementsStateRef.current);\r\n    let tempElemIndex = tempElems.findIndex(t => t.id === nodeId);\r\n    tempElems[tempElemIndex] = {\r\n      ...tempElems[tempElemIndex],\r\n      data: {\r\n        ...tempElems[tempElemIndex].data,\r\n        conditions: (tempElems[tempElemIndex].data?.conditions || []).filter(\r\n          t => t.id !== itemId\r\n        )\r\n      }\r\n    };\r\n    setSelectedCondition({\r\n      ...selConditionStateRef.current,\r\n      [selectedNodeStateRef.current]: (\r\n        selConditionStateRef.current[selectedNodeStateRef.current] || []\r\n      ).filter(c => c !== itemId)\r\n    });\r\n    setElements(tempElems);\r\n  };\r\n\r\n  const handleDeleteAction = (nodeId, itemId) => {\r\n    let tempElems = Object.assign([], elementsStateRef.current);\r\n    let tempElemIndex = tempElems.findIndex(t => t.id === nodeId);\r\n    tempElems[tempElemIndex] = {\r\n      ...tempElems[tempElemIndex],\r\n      data: {\r\n        ...tempElems[tempElemIndex].data,\r\n        actions: (tempElems[tempElemIndex].data?.actions || []).filter(\r\n          t => t.id !== itemId\r\n        )\r\n      }\r\n    };\r\n    setSelectedAction({\r\n      ...selActionStateRef.current,\r\n      [selectedNodeStateRef.current]: (\r\n        selActionStateRef.current[selectedNodeStateRef.current] || []\r\n      ).filter(a => a !== itemId)\r\n    });\r\n    setElements(tempElems);\r\n  };\r\n\r\n  const handleSave = () => {\r\n    const nodes = elements.filter(el => el.type === \"btnSelectorNode\");\r\n    const outputArr = [];\r\n    nodes.forEach(node => {\r\n      switch (node.data.type) {\r\n        case \"event\":\r\n          outputArr.push({ event: node.data.event });\r\n          break;\r\n        case \"condition\":\r\n          outputArr.push({ condition: node.data.conditions });\r\n          break;\r\n        case \"action-yes\":\r\n        case \"action\":\r\n          outputArr.push({ [node.data.type]: [...(node.data.actions || [])] });\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    });\r\n    console.log(\"output\", outputArr);\r\n  };\r\n\r\n  // Handle lose focus on node to hide drawer\r\n  const handleOnSelectionChange = e => {\r\n    if (!e) {\r\n      setShowDrawer(null);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Background fullHeight color=\"HomePage grey100\">\r\n      {showDrawer && (\r\n        <div className=\"drawer\">\r\n          {showDrawer === \"events\" && (\r\n            <>\r\n              <CardHeader>\r\n                <Typography variant=\"h3\">Events</Typography>\r\n              </CardHeader>\r\n              <CardBody\r\n                type=\"events\"\r\n                nodeId={selectedNode}\r\n                listItems={EVENTS}\r\n                selectedId={selectedEvent}\r\n                handleSelect={handleEventChange}\r\n              />\r\n            </>\r\n          )}\r\n\r\n          {showDrawer === \"conditions\" && (\r\n            <>\r\n              <CardHeader>\r\n                <Typography variant=\"h3\">Conditions</Typography>\r\n              </CardHeader>\r\n              <CardBody\r\n                type=\"conditions\"\r\n                nodeId={selectedNode}\r\n                listItems={CONDITIONS}\r\n                selectedId={selectedCondition}\r\n                handleSelect={handleConditionChange}\r\n              />\r\n            </>\r\n          )}\r\n\r\n          {showDrawer === \"actions\" && (\r\n            <>\r\n              <CardHeader>\r\n                <Typography variant=\"h3\">Actions</Typography>\r\n              </CardHeader>\r\n              <CardBody\r\n                type=\"actions\"\r\n                nodeId={selectedNode}\r\n                listItems={ACTIONS}\r\n                selectedId={selectedAction}\r\n                onFocusId={clickedAction?.id}\r\n                handleSelect={handleActionChange}\r\n              />\r\n              {clickedAction && (\r\n                <>\r\n                  <CardHeader>\r\n                    <Typography variant=\"h3\">Action Details</Typography>\r\n                  </CardHeader>\r\n                  <div className=\"card-body\">\r\n                    <TextField\r\n                      fullWidth\r\n                      margin=\"dense\"\r\n                      onChange={e =>\r\n                        setClickedAction(prev => ({\r\n                          ...prev,\r\n                          value: e.target.value\r\n                        }))\r\n                      }\r\n                      type={clickedAction.type}\r\n                      value={clickedAction.value || \"\"}\r\n                      label={clickedAction.label}\r\n                    />\r\n                    <Button\r\n                      variatn=\"text\"\r\n                      disableRipple\r\n                      onClick={handleAddAction}\r\n                    >\r\n                      Add\r\n                    </Button>\r\n                  </div>\r\n                </>\r\n              )}\r\n            </>\r\n          )}\r\n        </div>\r\n      )}\r\n\r\n      <div className=\"home-section\">\r\n        <CardHeader hasPreviewButton={true} handleSave={handleSave}>\r\n          <Typography variant=\"h3\">Map your automation</Typography>\r\n        </CardHeader>\r\n        <div className=\"flow-body\">\r\n          <ReactFlow\r\n            elementsSelectable={true}\r\n            elements={elements}\r\n            onElementsRemove={onElementsRemove}\r\n            onConnect={onConnect}\r\n            nodeTypes={nodeTypes}\r\n            deleteKeyCode={46} /* 'delete'-key */\r\n            onSelectionChange={handleOnSelectionChange}\r\n          />\r\n        </div>\r\n      </div>\r\n    </Background>\r\n  );\r\n}\r\n\r\nexport default HomePage;\r\n"],"sourceRoot":""}