{"version":3,"sources":["components/common/CardHeader/CardHeader.js","constants/constants.js","components/sidePanel/Events/Events.js","components/sidePanel/Conditions/Conditions.js","components/sidePanel/Actions/Actions.js","components/ButtonSelectorNode/ButtonSelectorNode.js","views/home/HomePage.js"],"names":["CardHeader","props","handleSave","hasPreviewButton","handlePreview","children","rest","className","IconButton","disableRipple","Button","variant","onClick","SAMPLE_EVENT_TRIGGERS","eventKey","eventDisplay","fields","conditionKey","conditionDisplay","type","options","SAMPLE_ACTIONS","actionKey","actionDisplay","key","placeHolder","option","CONDITION_OPERATORS","name","value","SAMPLE_FLOW","operator","actionInputs","Events","handleSelect","selectedEventKey","useState","showMore","setShowMore","Typography","length","map","item","startIcon","endIcon","Conditions","selectedConditionObj","useEffect","setConditions","Object","keys","includes","values","setMustMeet","initialConditionObj","selectedEventFields","find","t","mustMeet","conditions","handleOnChange","index","keyName","tempConditions","assign","split","FormControl","InputLabel","id","Select","labelId","onChange","e","target","MenuItem","c","i","Fragment","splice","handleOnRemove","f","filter","o","TextField","fullWidth","margin","join","label","FormHelperText","v","setModalState","title","subtitle","btnLabel","result","Actions","selectedActionObj","handleAddAction","actionsArr","unavailableActionKeys","fieldKeyValue","setFieldKeyValue","setClickedAction","formatActionInputs","onFocusObj","reduce","obj","clickedAction","handleFieldInputChange","field","test","tempFieldKeyValue","action","opt","placeholder","entries","memo","data","isConnectable","selectedElements","useStoreState","store","focusNodeAction","disabled","btnAction","stopPropagation","handleSwapConditionArrows","cond","replace","a","handleSelectAction","ai","handleDeleteAction","btnLabel2","btnAction2","position","style","bottom","top","background","nodeTypes","btnSelectorNode","ButtonSelectorNode","HomePage","window","innerWidth","persistent","initEventNodeElement","nodeId","x","y","toString","setShowDrawer","setSelectedNode","initConditionNodeElement","initActionNodeElement","setSelectedActionIndex","itemIndex","setUnavailableActionKeys","unavailableActionKeysStateRef","current","k","initChoiceNodeElement","setTotalConditionsCount","totalConditionsCountStateRef","tempElems","elementsStateRef","Number","push","initNodeEdge","source","setElements","showDrawer","selectedNode","selectedActionIndex","totalConditionsCount","elements","useRef","selectedNodeStateRef","tempElemIndex","findIndex","tempElements","yesNodeIndex","el","noNodeIndex","recursionFormObj","yesNodeId","noNodeId","recursionFromElement","conditionObj","Background","fullHeight","color","event","actionObj","slice","console","log","initialElements","sampleFlowConditions","output","noCondition","elementsSelectable","onElementsRemove","elementsToRemove","els","removeElements","onConnect","params","addEdge","onSelectionChange"],"mappings":"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","file":"static/js/4.92e34920.chunk.js","sourcesContent":["import React from \"react\";\r\nimport InfoOutlinedIcon from \"@material-ui/icons/InfoOutlined\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\n\r\nimport \"./CardHeader.scss\";\r\n\r\nconst CardHeader = props => {\r\n  const { handleSave, hasPreviewButton, handlePreview, children, ...rest } =\r\n    props;\r\n\r\n  return (\r\n    <div className={`CardHeader`} {...rest}>\r\n      <div className=\"left-section\">\r\n        {children}\r\n        <IconButton disableRipple>\r\n          <InfoOutlinedIcon />\r\n        </IconButton>\r\n      </div>\r\n      <div className=\"d-flex\">\r\n        {hasPreviewButton && (\r\n          <Button\r\n            variant=\"text\"\r\n            className=\"btn-preview\"\r\n            onClick={handlePreview}\r\n          >\r\n            View Preset Flow\r\n          </Button>\r\n        )}\r\n        {handleSave && (\r\n          <Button variant=\"contained\" onClick={handleSave}>\r\n            Save\r\n          </Button>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport { CardHeader };\r\n","export const SAMPLE_EVENT_TRIGGERS = [\r\n  {\r\n    eventKey: \"NewOrder\",\r\n    eventDisplay: \"New order placed\",\r\n    fields: [\r\n      {\r\n        conditionKey: \"ProductTitle\",\r\n        conditionDisplay: \"Product Title\",\r\n        type: \"string\"\r\n      },\r\n      {\r\n        conditionKey: \"ProductAmount\",\r\n        conditionDisplay: \"Product Amount\",\r\n        type: \"int\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    eventKey: \"NewSignup\",\r\n    eventDisplay: \"New signup\",\r\n    fields: [\r\n      {\r\n        conditionKey: \"Gender\",\r\n        conditionDisplay: \"Customer Gender\",\r\n        type: \"option\",\r\n        options: [\"Male\", \"Female\"]\r\n      },\r\n      { conditionKey: \"DOB\", conditionDisplay: \"Birthday\", type: \"date\" }\r\n    ]\r\n  }\r\n];\r\n\r\nexport const SAMPLE_ACTIONS = [\r\n  {\r\n    actionKey: \"SendEmail\",\r\n    actionDisplay: \"Send email to contact\",\r\n    fields: [\r\n      { key: \"emailAddress\", placeHolder: \"Email Address\", type: \"string\" }\r\n    ]\r\n  },\r\n  {\r\n    actionKey: \"CallContact\",\r\n    actionDisplay: \"Call contact\",\r\n    fields: [\r\n      { key: \"callContact\", placeHolder: \"Contact Number\", type: \"string\" },\r\n      {\r\n        key: \"callContactCountry\",\r\n        placeHolder: \"Country\",\r\n        type: \"selection\",\r\n        option: [\"Singapore\", \"Malaysia\"]\r\n      }\r\n    ]\r\n  }\r\n];\r\n\r\nexport const CONDITION_OPERATORS = [\r\n  { name: \"Equal\", value: \"=\", type: \"string\" },\r\n  { name: \"Not equal\", value: \"!=\", type: \"string\" },\r\n  { name: \"Contains\", value: \"contains\", type: \"string\" },\r\n  { name: \"Not contains\", value: \"not contains\", type: \"string\" },\r\n  { name: \"Greater than\", value: \">\", type: \"int\" },\r\n  { name: \"Less than\", value: \"<\", type: \"int\" },\r\n  { name: \"Greater and equal than\", value: \">=\", type: \"int\" },\r\n  { name: \"Less and equal than\", value: \"<=\", type: \"int\" },\r\n  { name: \"Equal\", value: \"=\", type: \"date\" },\r\n  { name: \"Earlier than\", value: \"earlier than\", type: \"date\" },\r\n  { name: \"Later than\", value: \"later than\", type: \"date\" }\r\n];\r\n\r\nexport const SAMPLE_FLOW = {\r\n  eventKey: \"NewOrder\",\r\n  conditions: [\r\n    {\r\n      \"Fn::If\": [\r\n        [\r\n          {\r\n            \"Fn::And\": [\r\n              {\r\n                conditionKey: \"ProductTitle\",\r\n                value: [\"coke\", \"pepsi\"],\r\n                operator: \"contains\"\r\n              },\r\n              {\r\n                conditionKey: \"ProductAmount\",\r\n                value: [\"30\"],\r\n                operator: \">=\"\r\n              }\r\n            ]\r\n          }\r\n        ],\r\n        [\r\n          {\r\n            \"Fn::If\": [\r\n              [\r\n                {\r\n                  conditionKey: \"ProductTitle\",\r\n                  value: [\"coke\"],\r\n                  operator: \"=\"\r\n                }\r\n              ],\r\n              [\r\n                {\r\n                  actionKey: \"CallContact\",\r\n                  actionInputs: [\r\n                    {\r\n                      key: \"callContact\",\r\n                      value: \"999\"\r\n                    },\r\n                    {\r\n                      key: \"callContactCountry\",\r\n                      value: \"Singapore\"\r\n                    }\r\n                  ]\r\n                }\r\n              ],\r\n              [\r\n                {\r\n                  actionKey: \"SendEmail\",\r\n                  actionInputs: [\r\n                    {\r\n                      key: \"emailAddress\",\r\n                      value: \"simon@gmail.com\"\r\n                    }\r\n                  ]\r\n                }\r\n              ]\r\n            ]\r\n          }\r\n        ],\r\n        [\r\n          {\r\n            actionKey: \"CallContact\",\r\n            actionInputs: [\r\n              {\r\n                key: \"callContact\",\r\n                value: \"0123456789\"\r\n              },\r\n              {\r\n                key: \"callContactCountry\",\r\n                value: \"Malaysia\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            actionKey: \"SendEmail\",\r\n            actionInputs: [\r\n              {\r\n                key: \"emailAddress\",\r\n                value: \"hello@gmail.com\"\r\n              }\r\n            ]\r\n          }\r\n        ]\r\n      ]\r\n    }\r\n  ]\r\n};\r\n","import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { CardHeader } from \"components/common/CardHeader/CardHeader\";\r\nimport AddBoxOutlinedIcon from \"@material-ui/icons/AddBoxOutlined\";\r\nimport KeyboardArrowUpOutlinedIcon from \"@material-ui/icons/KeyboardArrowUpOutlined\";\r\nimport KeyboardArrowDownOutlinedIcon from \"@material-ui/icons/KeyboardArrowDownOutlined\";\r\nimport { SAMPLE_EVENT_TRIGGERS } from \"constants/constants\";\r\n\r\nimport \"./Events.scss\";\r\n\r\nconst Events = props => {\r\n  const { handleSelect, selectedEventKey, ...rest } = props;\r\n  const [showMore, setShowMore] = useState(false);\r\n\r\n  return (\r\n    <div className={`Events`} {...rest}>\r\n      <CardHeader>\r\n        <Typography variant=\"h3\">Events</Typography>\r\n      </CardHeader>\r\n\r\n      <div\r\n        className={`content-body ${\r\n          SAMPLE_EVENT_TRIGGERS.length > 3 ? \"has-show-more\" : \"\"\r\n        } ${showMore ? \"show-all\" : \"\"}`}\r\n        {...rest}\r\n      >\r\n        {SAMPLE_EVENT_TRIGGERS.map(item => (\r\n          <Button\r\n            key={item.eventKey}\r\n            onClick={() => handleSelect(item)}\r\n            disableRipple\r\n            variant=\"text\"\r\n            className={`btn-card-item ${\r\n              selectedEventKey === item.eventKey ? \"on-focus\" : \"\"\r\n            }`}\r\n            startIcon={<AddBoxOutlinedIcon />}\r\n          >\r\n            {item.eventDisplay}\r\n          </Button>\r\n        ))}\r\n      </div>\r\n\r\n      {SAMPLE_EVENT_TRIGGERS.length > 3 && (\r\n        <div className=\"btn-show-more\">\r\n          <Button\r\n            onClick={() => setShowMore(!showMore)}\r\n            variant=\"text\"\r\n            disableRipple\r\n            endIcon={\r\n              showMore ? (\r\n                <KeyboardArrowUpOutlinedIcon />\r\n              ) : (\r\n                <KeyboardArrowDownOutlinedIcon />\r\n              )\r\n            }\r\n          >\r\n            Show {showMore ? \"less\" : \"more\"}\r\n          </Button>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nEvents.propTypes = {\r\n  selectedEventKey: PropTypes.string,\r\n  handleSelect: PropTypes.func\r\n};\r\nexport { Events };\r\n","import React, { useState, useEffect } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport FormHelperText from \"@material-ui/core/FormHelperText\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport ClearIcon from \"@material-ui/icons/Clear\";\r\nimport AddBoxOutlinedIcon from \"@material-ui/icons/AddBoxOutlined\";\r\nimport { setModalState } from \"states/modalState\";\r\nimport { CardHeader } from \"components/common/CardHeader/CardHeader\";\r\nimport {\r\n  SAMPLE_EVENT_TRIGGERS,\r\n  CONDITION_OPERATORS\r\n} from \"constants/constants\";\r\n\r\nimport \"./Conditions.scss\";\r\n\r\nconst Conditions = props => {\r\n  const { selectedEventKey, selectedConditionObj, handleSelect, ...rest } =\r\n    props;\r\n\r\n  useEffect(() => {\r\n    setConditions(\r\n      Object.keys(selectedConditionObj)[0]?.includes(\"Fn::\")\r\n        ? Object.values(selectedConditionObj)[0]\r\n        : [\r\n            {\r\n              conditionKey: selectedConditionObj.conditionKey || \"\",\r\n              value: selectedConditionObj.value || [],\r\n              operator: selectedConditionObj.operator || \"\"\r\n            }\r\n          ]\r\n    );\r\n    setMustMeet(\r\n      Object.keys(selectedConditionObj)[0]?.includes(\"Fn::\")\r\n        ? Object.keys(selectedConditionObj)[0]\r\n        : \"\"\r\n    );\r\n  }, [selectedConditionObj]);\r\n\r\n  const initialConditionObj = {\r\n    conditionKey: \"\",\r\n    value: [],\r\n    operator: \"\"\r\n  };\r\n\r\n  const selectedEventFields = SAMPLE_EVENT_TRIGGERS.find(\r\n    t => t.eventKey === selectedEventKey\r\n  ).fields;\r\n\r\n  const [mustMeet, setMustMeet] = useState(\"\");\r\n  const [conditions, setConditions] = useState([\r\n    {\r\n      conditionKey: \"\",\r\n      value: [],\r\n      operator: \"\"\r\n    }\r\n  ]);\r\n\r\n  const handleOnAdd = () => {\r\n    if (!mustMeet) {\r\n      setMustMeet(\"Fn::And\");\r\n    }\r\n    setConditions([...conditions, initialConditionObj]);\r\n  };\r\n\r\n  const handleOnSave = () => {\r\n    // Empty field validation\r\n    if (\r\n      conditions.find(\r\n        c => !c.conditionKey || !c.operator || c.value.filter(v => !v).length\r\n      )\r\n    ) {\r\n      setModalState({\r\n        title: \"Warning\",\r\n        subtitle: \"Please complete the condition fields before saving\",\r\n        btnLabel: \"OK\"\r\n      });\r\n      return;\r\n    }\r\n    const result = mustMeet ? { [mustMeet]: conditions } : conditions[0];\r\n    handleSelect(result);\r\n  };\r\n\r\n  const handleOnRemove = index => {\r\n    if (conditions.length === 2) {\r\n      setMustMeet(\"\");\r\n    }\r\n    const tempConditions = Object.assign([], conditions);\r\n    tempConditions.splice(index, 1);\r\n    setConditions(tempConditions);\r\n  };\r\n\r\n  const handleOnChange = (value, index, keyName) => {\r\n    const tempConditions = Object.assign([], conditions);\r\n    if (keyName === \"value\") {\r\n      tempConditions[index].value = value.split(\",\");\r\n    } else {\r\n      tempConditions[index][keyName] = value;\r\n    }\r\n    setConditions(tempConditions);\r\n  };\r\n\r\n  return (\r\n    <div className={`Conditions`} {...rest}>\r\n      <CardHeader>\r\n        <Typography variant=\"h3\">Conditions</Typography>\r\n      </CardHeader>\r\n\r\n      <div className={`content-body`} {...rest}>\r\n        {conditions.length > 1 && (\r\n          <FormControl className=\"mb-1-5\">\r\n            <InputLabel id={`label-must-meet`}>\r\n              All conditions must meet\r\n            </InputLabel>\r\n            <Select\r\n              labelId={`label-must-meet`}\r\n              id=\"must-meet\"\r\n              value={mustMeet}\r\n              onChange={e => setMustMeet(e.target.value)}\r\n            >\r\n              <MenuItem value=\"Fn::And\">AND</MenuItem>\r\n              <MenuItem value=\"Fn::Or\">OR</MenuItem>\r\n            </Select>\r\n          </FormControl>\r\n        )}\r\n\r\n        {conditions.map((c, i) => (\r\n          <React.Fragment key={i}>\r\n            {i !== 0 && (\r\n              <Button\r\n                className=\"btn-clear\"\r\n                variant=\"text\"\r\n                startIcon={<ClearIcon />}\r\n                disableRipple\r\n                onClick={() => handleOnRemove(i)}\r\n              >\r\n                Remove\r\n              </Button>\r\n            )}\r\n            <FormControl>\r\n              <InputLabel id={`label-condition-${i}`}>\r\n                Condition {i + 1}\r\n              </InputLabel>\r\n              <Select\r\n                labelId={`label-condition-${i}`}\r\n                id={`condition-${i}`}\r\n                value={c.conditionKey || \"\"}\r\n                onChange={e =>\r\n                  handleOnChange(e.target.value, i, \"conditionKey\")\r\n                }\r\n              >\r\n                {selectedEventFields.map(item => (\r\n                  <MenuItem key={item.conditionKey} value={item.conditionKey}>\r\n                    {item.conditionDisplay}\r\n                  </MenuItem>\r\n                ))}\r\n              </Select>\r\n            </FormControl>\r\n\r\n            <FormControl>\r\n              <InputLabel id={`label-operator-${i}`}>\r\n                Operator {i + 1}\r\n              </InputLabel>\r\n              <Select\r\n                labelId={`label-operator-${i}`}\r\n                id={`operator-${i}`}\r\n                value={c.operator || \"\"}\r\n                onChange={e => handleOnChange(e.target.value, i, \"operator\")}\r\n              >\r\n                {selectedEventFields.find(\r\n                  f => f.conditionKey === c.conditionKey\r\n                )?.type === \"option\"\r\n                  ? selectedEventFields\r\n                      .find(f => f.conditionKey === c.conditionKey)\r\n                      .options.map(option => (\r\n                        <MenuItem key={option} value={option}>\r\n                          {option}\r\n                        </MenuItem>\r\n                      ))\r\n                  : CONDITION_OPERATORS.filter(\r\n                      o =>\r\n                        o.type ===\r\n                        selectedEventFields.find(\r\n                          f => f.conditionKey === c.conditionKey\r\n                        )?.type\r\n                    )?.map(operator => (\r\n                      <MenuItem key={operator.value} value={operator.value}>\r\n                        {operator.name}\r\n                      </MenuItem>\r\n                    ))}\r\n              </Select>\r\n            </FormControl>\r\n\r\n            <FormControl>\r\n              <TextField\r\n                fullWidth\r\n                margin=\"dense\"\r\n                onChange={e => handleOnChange(e.target.value, i, \"value\")}\r\n                type={\"text\"}\r\n                value={c.value.join(\",\") || \"\"}\r\n                label={`Value ${i + 1}`}\r\n              />\r\n              <FormHelperText>\r\n                Please separate multiple values by comma\r\n              </FormHelperText>\r\n            </FormControl>\r\n\r\n            {conditions.length - 1 !== i && (\r\n              <Typography variant=\"h6\" className=\"must-meet-separator\">\r\n                {mustMeet === \"Fn::And\" ? \"AND\" : \"OR\"}\r\n              </Typography>\r\n            )}\r\n          </React.Fragment>\r\n        ))}\r\n\r\n        <Button\r\n          variant=\"text\"\r\n          startIcon={<AddBoxOutlinedIcon />}\r\n          disableRipple\r\n          className=\"btn-add\"\r\n          onClick={handleOnAdd}\r\n        >\r\n          Add Condition\r\n        </Button>\r\n        <Button variant=\"contained\" disableRipple onClick={handleOnSave}>\r\n          Save Condition\r\n        </Button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nConditions.propTypes = {\r\n  selectedEventKey: PropTypes.string,\r\n  selectedConditionObj: PropTypes.object,\r\n  handleSelect: PropTypes.func\r\n};\r\nexport { Conditions };\r\n","import React, { useState, useEffect } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport { CardHeader } from \"components/common/CardHeader/CardHeader\";\r\nimport AddBoxOutlinedIcon from \"@material-ui/icons/AddBoxOutlined\";\r\nimport KeyboardArrowUpOutlinedIcon from \"@material-ui/icons/KeyboardArrowUpOutlined\";\r\nimport KeyboardArrowDownOutlinedIcon from \"@material-ui/icons/KeyboardArrowDownOutlined\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport { setModalState } from \"states/modalState\";\r\nimport { SAMPLE_ACTIONS } from \"constants/constants\";\r\n\r\nimport \"./Actions.scss\";\r\n\r\nconst Actions = props => {\r\n  const {\r\n    handleSelect,\r\n    handleAddAction,\r\n    actionsArr,\r\n    selectedActionObj,\r\n    unavailableActionKeys,\r\n    ...rest\r\n  } = props;\r\n\r\n  const [fieldKeyValue, setFieldKeyValue] = useState({});\r\n\r\n  useEffect(() => {\r\n    if (Object.keys(selectedActionObj).length) {\r\n      setClickedAction(formatActionInputs(selectedActionObj));\r\n    } else {\r\n      setClickedAction({});\r\n      setFieldKeyValue({});\r\n    }\r\n  }, [selectedActionObj]);\r\n\r\n  const formatActionInputs = onFocusObj => {\r\n    setFieldKeyValue(\r\n      onFocusObj.actionInputs.reduce((map, obj) => {\r\n        map[obj.key] = obj.value;\r\n        return map;\r\n      }, {})\r\n    );\r\n    return SAMPLE_ACTIONS.find(f => f.actionKey === onFocusObj.actionKey);\r\n  };\r\n\r\n  const [clickedAction, setClickedAction] = useState({});\r\n  const [showMore, setShowMore] = useState(false);\r\n\r\n  const handleOnClickAction = action => {\r\n    setClickedAction(action);\r\n  };\r\n\r\n  const handleOnAddOrUpdate = () => {\r\n    if (\r\n      clickedAction.fields.length !== Object.keys(fieldKeyValue).length ||\r\n      Object.values(fieldKeyValue).filter(v => !v).length\r\n    ) {\r\n      setModalState({\r\n        title: \"Warning\",\r\n        subtitle: \"Please complete the action fields before saving\",\r\n        btnLabel: \"OK\"\r\n      });\r\n      return;\r\n    }\r\n    const result = {\r\n      actionKey: clickedAction.actionKey,\r\n      actionInputs: Object.entries(fieldKeyValue).map(f => ({\r\n        key: f[0],\r\n        value: f[1]\r\n      }))\r\n    };\r\n    handleSelect(\r\n      result,\r\n      Object.keys(selectedActionObj).length ? \"update\" : \"add\"\r\n    );\r\n  };\r\n\r\n  const handleFieldInputChange = (e, field) => {\r\n    if (field.key === \"callContact\" && !/^[0-9]*$/.test(e.target.value)) {\r\n      return;\r\n    }\r\n    const tempFieldKeyValue = Object.assign({}, fieldKeyValue);\r\n    tempFieldKeyValue[field.key] = e.target.value;\r\n    setFieldKeyValue(tempFieldKeyValue);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className={`Actions`} {...rest}>\r\n        <CardHeader>\r\n          <Typography variant=\"h3\">Actions</Typography>\r\n        </CardHeader>\r\n\r\n        <div\r\n          className={`content-body ${\r\n            SAMPLE_ACTIONS.length > 3 ? \"has-show-more\" : \"\"\r\n          } ${showMore ? \"show-all\" : \"\"}`}\r\n          {...rest}\r\n        >\r\n          {SAMPLE_ACTIONS.filter(\r\n            action => !unavailableActionKeys.includes(action.actionKey)\r\n          ).map(item => (\r\n            <Button\r\n              key={item.actionKey}\r\n              onClick={() => handleOnClickAction(item)}\r\n              disableRipple\r\n              variant=\"text\"\r\n              className={`btn-card-item ${\r\n                clickedAction?.actionKey === item.actionKey ? \"on-focus\" : \"\"\r\n              }`}\r\n              startIcon={<AddBoxOutlinedIcon />}\r\n            >\r\n              {item.actionDisplay}\r\n            </Button>\r\n          ))}\r\n\r\n          {!SAMPLE_ACTIONS.filter(\r\n            action => !unavailableActionKeys.includes(action.actionKey)\r\n          ).length && (\r\n            <Typography variant=\"body1\" className=\"label-no-more\">\r\n              No action available\r\n            </Typography>\r\n          )}\r\n        </div>\r\n\r\n        {SAMPLE_ACTIONS.length > 3 && (\r\n          <div className=\"btn-show-more\">\r\n            <Button\r\n              onClick={() => setShowMore(!showMore)}\r\n              variant=\"text\"\r\n              disableRipple\r\n              endIcon={\r\n                showMore ? (\r\n                  <KeyboardArrowUpOutlinedIcon />\r\n                ) : (\r\n                  <KeyboardArrowDownOutlinedIcon />\r\n                )\r\n              }\r\n            >\r\n              Show {showMore ? \"less\" : \"more\"}\r\n            </Button>\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n      {Object.keys(clickedAction).length > 0 && (\r\n        <>\r\n          <CardHeader>\r\n            <Typography variant=\"h3\">Action Details</Typography>\r\n          </CardHeader>\r\n          <div className=\"card-body\">\r\n            {clickedAction.fields.map(field =>\r\n              field.type === \"selection\" ? (\r\n                <FormControl key={field.key}>\r\n                  <InputLabel id={`label-${field.key}`}>\r\n                    {field.placeHolder}\r\n                  </InputLabel>\r\n                  <Select\r\n                    labelId={`label-${field.key}`}\r\n                    id={field.key}\r\n                    value={fieldKeyValue[field.key] || \"\"}\r\n                    onChange={e => handleFieldInputChange(e, field)}\r\n                  >\r\n                    {field.option.map(opt => (\r\n                      <MenuItem key={opt} value={opt}>\r\n                        {opt}\r\n                      </MenuItem>\r\n                    ))}\r\n                  </Select>\r\n                </FormControl>\r\n              ) : (\r\n                <TextField\r\n                  key={field.key}\r\n                  fullWidth\r\n                  margin=\"dense\"\r\n                  onChange={e => handleFieldInputChange(e, field)}\r\n                  type={\"text\"}\r\n                  value={fieldKeyValue[field.key] || \"\"}\r\n                  label={field.placeHolder}\r\n                  placeholder={field.placeHolder}\r\n                />\r\n              )\r\n            )}\r\n            <Button\r\n              variant=\"contained\"\r\n              className=\"mt-1\"\r\n              disableRipple\r\n              onClick={handleOnAddOrUpdate}\r\n            >\r\n              {Object.keys(selectedActionObj).length ? \"Update\" : \"Add\"}\r\n            </Button>\r\n          </div>\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nActions.propTypes = {\r\n  handleSelect: PropTypes.func,\r\n  handleAddAction: PropTypes.func,\r\n  unavailableActionKeys: PropTypes.array,\r\n  actionsArr: PropTypes.array,\r\n  selectedActionObj: PropTypes.object\r\n};\r\nexport { Actions };\r\n","import React, { memo } from \"react\";\r\n\r\nimport { Handle, useStoreState } from \"react-flow-renderer\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport HighlightOffIcon from \"@material-ui/icons/HighlightOff\";\r\nimport LoopIcon from \"@material-ui/icons/Loop\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\n\r\nimport \"./ButtonSelectorNode.scss\";\r\n\r\nexport default memo(({ id, data, isConnectable }) => {\r\n  const selectedElements = useStoreState(store => store.selectedElements);\r\n\r\n  return (\r\n    <div\r\n      className={`ButtonSelectorNode ${\r\n        selectedElements && selectedElements[0].id === id ? \"is-selected\" : \"\"\r\n      }`}\r\n      onClick={() => data.focusNodeAction(id)}\r\n    >\r\n      <div>\r\n        <Typography variant=\"body1\">{data.label}</Typography>\r\n      </div>\r\n\r\n      {/* Event type */}\r\n      {data.type === \"event\" &&\r\n        (data.item ? (\r\n          <Button variant=\"contained\" disabled className=\"lbl-event\">\r\n            {data.item?.eventDisplay}\r\n          </Button>\r\n        ) : (\r\n          data.btnLabel && (\r\n            <Button\r\n              onClick={e => {\r\n                data.btnAction(id);\r\n                e.stopPropagation();\r\n              }}\r\n              variant=\"contained\"\r\n            >\r\n              {data.btnLabel}\r\n            </Button>\r\n          )\r\n        ))}\r\n\r\n      {/* Condition or Choice type */}\r\n      {(data.type === \"condition\" || data.type === \"choice\") && (\r\n        <>\r\n          {data.type === \"condition\" && (\r\n            <IconButton\r\n              disableRipple\r\n              className=\"btn-swap\"\r\n              onClick={e => {\r\n                data.handleSwapConditionArrows(id);\r\n                e.stopPropagation();\r\n              }}\r\n            >\r\n              <LoopIcon />\r\n            </IconButton>\r\n          )}\r\n          {data.item ? (\r\n            <Button variant=\"contained\" disabled className=\"lbl-condition\">\r\n              {Object.keys(data.item)[0].includes(\"Fn::\")\r\n                ? Object.values(data.item)[0]\r\n                    .map(\r\n                      cond =>\r\n                        `${cond.conditionKey} ${\r\n                          cond.operator\r\n                        } ${cond.value.join(\", \")}`\r\n                    )\r\n                    .join(` ${Object.keys(data.item)[0].replace(\"Fn::\", \"\")} `)\r\n                : `${data.item.conditionKey} ${\r\n                    data.item.operator\r\n                  } ${data.item.value.join(\", \")}`}\r\n            </Button>\r\n          ) : (\r\n            data.btnLabel && (\r\n              <Button\r\n                onClick={e => {\r\n                  data.btnAction(id);\r\n                  e.stopPropagation();\r\n                }}\r\n                variant=\"contained\"\r\n              >\r\n                {data.btnLabel}\r\n              </Button>\r\n            )\r\n          )}\r\n        </>\r\n      )}\r\n\r\n      {/* Action Type */}\r\n      {data.type === \"action\" &&\r\n        (data.item?.length ? (\r\n          <>\r\n            {data.item.map((a, i) => (\r\n              <React.Fragment key={i}>\r\n                <div className=\"label-div\">\r\n                  <Button\r\n                    variant=\"contained\"\r\n                    onClick={e => {\r\n                      data.handleSelectAction(id, i);\r\n                      e.stopPropagation();\r\n                    }}\r\n                    className=\"lbl-action\"\r\n                  >\r\n                    {`Action: ${a.actionKey}\r\n                    ${a.actionInputs\r\n                      .map(ai => `${ai.key} - ${ai.value}`)\r\n                      .join(\", \")}`}\r\n                  </Button>\r\n                  <IconButton\r\n                    disableRipple\r\n                    onClick={e => {\r\n                      data.handleDeleteAction(id, i, a.actionKey);\r\n                      e.stopPropagation();\r\n                    }}\r\n                  >\r\n                    <HighlightOffIcon />\r\n                  </IconButton>\r\n                  {i !== data.item.length - 1 && (\r\n                    <Typography variant=\"h6\">AND</Typography>\r\n                  )}\r\n                </div>\r\n              </React.Fragment>\r\n            ))}\r\n\r\n            <Button\r\n              onClick={e => {\r\n                data.btnAction(id);\r\n                e.stopPropagation();\r\n              }}\r\n              variant=\"contained\"\r\n            >\r\n              Add Action\r\n            </Button>\r\n          </>\r\n        ) : (\r\n          data.btnLabel && (\r\n            <Button\r\n              onClick={e => {\r\n                data.btnAction(id);\r\n                e.stopPropagation();\r\n              }}\r\n              variant=\"contained\"\r\n            >\r\n              {data.btnLabel}\r\n            </Button>\r\n          )\r\n        ))}\r\n\r\n      {data.type === \"choice\" && (\r\n        <Typography variant=\"h6\" className=\"text-or\">\r\n          OR\r\n        </Typography>\r\n      )}\r\n\r\n      {data.btnLabel2 && (\r\n        <Button\r\n          onClick={e => {\r\n            data.btnAction2(id);\r\n            e.stopPropagation();\r\n          }}\r\n          variant=\"contained\"\r\n        >\r\n          {data.btnLabel2}\r\n        </Button>\r\n      )}\r\n\r\n      <Handle\r\n        type=\"source\"\r\n        position=\"bottom\"\r\n        style={{ bottom: 10, top: \"auto\", background: \"#555\" }}\r\n        isConnectable={isConnectable}\r\n      />\r\n    </div>\r\n  );\r\n});\r\n","import React, { useEffect, useState, useRef } from \"react\";\r\nimport ReactFlow, { removeElements, addEdge } from \"react-flow-renderer\";\r\n\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { Events } from \"components/sidePanel/Events/Events\";\r\nimport { Conditions } from \"components/sidePanel/Conditions/Conditions\";\r\nimport { Actions } from \"components/sidePanel/Actions/Actions\";\r\nimport { Background } from \"components/common/Background/Background\";\r\nimport { CardHeader } from \"components/common/CardHeader/CardHeader\";\r\nimport ButtonSelectorNode from \"components/ButtonSelectorNode/ButtonSelectorNode\";\r\nimport { SAMPLE_EVENT_TRIGGERS, SAMPLE_FLOW } from \"constants/constants\";\r\nimport { setModalState } from \"states/modalState\";\r\n\r\nimport \"./HomePage.scss\";\r\n\r\nconst nodeTypes = {\r\n  btnSelectorNode: ButtonSelectorNode\r\n};\r\n\r\nfunction HomePage() {\r\n  useEffect(() => {\r\n    if (window.innerWidth < 768) {\r\n      setModalState({\r\n        title: \"Warning\",\r\n        subtitle: \"Device must be larger than 768px x 1024px to support flow\",\r\n        persistent: true\r\n      });\r\n    }\r\n  }, []);\r\n\r\n  const initEventNodeElement = (\r\n    item,\r\n    nodeId = 1,\r\n    position = { x: 250, y: 25 }\r\n  ) => ({\r\n    id: nodeId.toString(),\r\n    position,\r\n    type: \"btnSelectorNode\",\r\n    data: {\r\n      item,\r\n      type: \"event\",\r\n      label: \"When\",\r\n      btnLabel: \"Select Event Trigger\",\r\n      focusNodeAction: id => {\r\n        setShowDrawer(\"events\");\r\n        setSelectedNode(id);\r\n      },\r\n      btnAction: id => {\r\n        setShowDrawer(\"events\");\r\n        setSelectedNode(id);\r\n      }\r\n    }\r\n  });\r\n\r\n  const initConditionNodeElement = (\r\n    item,\r\n    nodeId = 1,\r\n    position = { x: 250, y: 25 }\r\n  ) => ({\r\n    id: nodeId.toString(),\r\n    position,\r\n    type: \"btnSelectorNode\",\r\n    data: {\r\n      item,\r\n      type: \"condition\",\r\n      label: \"If...\",\r\n      btnLabel: \"Add condition\",\r\n      focusNodeAction: id => {\r\n        setShowDrawer(\"conditions\");\r\n        setSelectedNode(id);\r\n      },\r\n      handleSwapConditionArrows: id => handleSwapConditionArrows(id),\r\n      btnAction: id => {\r\n        setShowDrawer(\"conditions\");\r\n        setSelectedNode(id);\r\n      }\r\n    }\r\n  });\r\n\r\n  const initActionNodeElement = (\r\n    item,\r\n    nodeId = 1,\r\n    position = { x: 250, y: 25 }\r\n  ) => ({\r\n    id: nodeId.toString(),\r\n    position,\r\n    type: \"btnSelectorNode\",\r\n    data: {\r\n      item,\r\n      type: \"action\",\r\n      label: \"Then...\",\r\n      btnLabel: \"Add action\",\r\n      focusNodeAction: id => {\r\n        setShowDrawer(null);\r\n        setSelectedActionIndex(null);\r\n        setSelectedNode(id);\r\n      },\r\n      btnAction: id => {\r\n        setShowDrawer(\"actions\");\r\n        setSelectedActionIndex(null);\r\n        setSelectedNode(id);\r\n      },\r\n      handleSelectAction: (id, itemIndex) => {\r\n        setShowDrawer(\"actions\");\r\n        setSelectedNode(id);\r\n        handleSelectAction(itemIndex);\r\n      },\r\n      handleDeleteAction: (id, itemIndex, actionKey) => {\r\n        setUnavailableActionKeys(\r\n          unavailableActionKeysStateRef.current.filter(k => k !== actionKey)\r\n        );\r\n        setSelectedNode(id);\r\n        handleDeleteAction(id, itemIndex);\r\n      }\r\n    }\r\n  });\r\n\r\n  const initChoiceNodeElement = (nodeId = 1, position = { x: 250, y: 25 }) => ({\r\n    id: nodeId.toString(),\r\n    position,\r\n    type: \"btnSelectorNode\",\r\n    data: {\r\n      type: \"choice\",\r\n      label: \"Next Step\",\r\n      btnLabel: \"Add condition\",\r\n      btnLabel2: \"Add action\",\r\n      focusNodeAction: id => {\r\n        setShowDrawer(null);\r\n        setSelectedNode(id);\r\n      },\r\n      btnAction: id => {\r\n        setShowDrawer(\"conditions\");\r\n        setTotalConditionsCount(totalConditionsCountStateRef.current + 1);\r\n        setSelectedNode(id);\r\n\r\n        let tempElems = Object.assign([], elementsStateRef.current);\r\n        tempElems = tempElems.filter(\r\n          t =>\r\n            t.id !== nodeId &&\r\n            t.id !== `edges-${(Number(nodeId) - 1).toString()}-${nodeId}`\r\n        );\r\n        tempElems.push(\r\n          initConditionNodeElement(null, nodeId, position), // 2\r\n          initActionNodeElement(null, Number(nodeId) + 1, {\r\n            // 3 = yes\r\n            x: position.x,\r\n            y: position.y + 400\r\n          }),\r\n          totalConditionsCountStateRef.current + 1 === 3 // reached max 3 conditions limit\r\n            ? initActionNodeElement(null, Number(nodeId) + 2, {\r\n                x: position.x + 300,\r\n                y: position.y + 150\r\n              })\r\n            : initChoiceNodeElement((Number(nodeId) + 2).toString(), {\r\n                x: position.x + 300,\r\n                y: position.y + 150\r\n              }),\r\n          ...(nodeId === \"2\"\r\n            ? [\r\n                initNodeEdge({\r\n                  source: (Number(nodeId) - 1).toString(),\r\n                  target: nodeId\r\n                })\r\n              ]\r\n            : []),\r\n          initNodeEdge({\r\n            source: nodeId,\r\n            target: (Number(nodeId) + 1).toString(), // edges-2-3\r\n            label: \"yes\"\r\n          }),\r\n          initNodeEdge({\r\n            source: nodeId,\r\n            target: (Number(nodeId) + 2).toString(), // edges-2-4\r\n            label: \"no\"\r\n          })\r\n        );\r\n        setElements(tempElems);\r\n      },\r\n      btnAction2: id => {\r\n        setShowDrawer(\"actions\");\r\n        setSelectedNode(id);\r\n\r\n        let tempElems = Object.assign([], elementsStateRef.current);\r\n        tempElems = tempElems.filter(\r\n          t =>\r\n            t.id !== nodeId &&\r\n            t.id !== `edges-${(Number(nodeId) - 1).toString()}-${nodeId}` // edges-1-2\r\n        );\r\n        tempElems.push(\r\n          initActionNodeElement(null, nodeId, position),\r\n          ...(nodeId === \"2\"\r\n            ? [\r\n                initNodeEdge({\r\n                  source: (Number(nodeId) - 1).toString(),\r\n                  target: nodeId\r\n                })\r\n              ]\r\n            : [])\r\n        );\r\n\r\n        setElements(tempElems);\r\n      }\r\n    }\r\n  });\r\n\r\n  const initNodeEdge = ({ source, target, label }) => ({\r\n    id: `edges-${source}-${target}`, // edges-1-2\r\n    source: source.toString(),\r\n    target: target.toString(),\r\n    type: \"smoothstep\",\r\n    label\r\n  });\r\n\r\n  const [showDrawer, setShowDrawer] = useState(\"events\");\r\n  const [selectedNode, setSelectedNode] = useState(\"1\");\r\n  const [selectedActionIndex, setSelectedActionIndex] = useState(null);\r\n  const [unavailableActionKeys, setUnavailableActionKeys] = useState([]);\r\n  const [totalConditionsCount, setTotalConditionsCount] = useState(0);\r\n  const [elements, setElements] = useState([initEventNodeElement()]);\r\n  const onElementsRemove = elementsToRemove =>\r\n    setElements(els => removeElements(elementsToRemove, els));\r\n  const onConnect = params => setElements(els => addEdge(params, els));\r\n\r\n  const elementsStateRef = useRef();\r\n  elementsStateRef.current = elements;\r\n  const selectedNodeStateRef = useRef();\r\n  selectedNodeStateRef.current = selectedNode;\r\n  const unavailableActionKeysStateRef = useRef();\r\n  unavailableActionKeysStateRef.current = unavailableActionKeys;\r\n  const totalConditionsCountStateRef = useRef();\r\n  totalConditionsCountStateRef.current = totalConditionsCount;\r\n\r\n  const handleEventChange = event => {\r\n    // setFlow({ ...flow, eventKey: event.eventKey });\r\n    let tempElems = Object.assign([], elementsStateRef.current);\r\n    tempElems[0] = initEventNodeElement(event);\r\n\r\n    if (tempElems.length === 1) {\r\n      tempElems.push(\r\n        initChoiceNodeElement(\"2\", { x: 250, y: 200 }),\r\n        initNodeEdge({\r\n          source: \"1\",\r\n          target: \"2\"\r\n        })\r\n      );\r\n    }\r\n    setShowDrawer(null);\r\n    setElements(tempElems);\r\n  };\r\n\r\n  const handleConditionChange = conditionObj => {\r\n    let tempElems = Object.assign([], elementsStateRef.current);\r\n    let tempElemIndex = tempElems.findIndex(\r\n      t => t.id === selectedNodeStateRef.current\r\n    );\r\n    tempElems[tempElemIndex] = {\r\n      ...tempElems[tempElemIndex],\r\n      data: {\r\n        ...tempElems[tempElemIndex]?.data,\r\n        item: conditionObj\r\n      }\r\n    };\r\n    setElements(tempElems);\r\n  };\r\n\r\n  // type = add / update\r\n  const handleActionChange = (actionObj, type) => {\r\n    let tempElems = Object.assign([], elementsStateRef.current);\r\n    let tempElemIndex = tempElems.findIndex(\r\n      t => t.id === selectedNodeStateRef.current\r\n    );\r\n    tempElems[tempElemIndex] = {\r\n      ...tempElems[tempElemIndex],\r\n      data: {\r\n        ...tempElems[tempElemIndex]?.data,\r\n        item:\r\n          type === \"update\"\r\n            ? [\r\n                ...tempElems[tempElemIndex]?.data?.item.slice(\r\n                  0,\r\n                  selectedActionIndex\r\n                ),\r\n                actionObj,\r\n                ...tempElems[tempElemIndex]?.data?.item.slice(\r\n                  selectedActionIndex + 1\r\n                )\r\n              ]\r\n            : [...(tempElems[tempElemIndex]?.data?.item || []), actionObj]\r\n      }\r\n    };\r\n    console.log(selectedNode);\r\n    setUnavailableActionKeys([...unavailableActionKeys, actionObj.actionKey]);\r\n    setElements(tempElems);\r\n  };\r\n\r\n  const handleSelectAction = itemIndex => {\r\n    setSelectedActionIndex(itemIndex);\r\n  };\r\n\r\n  const handleDeleteAction = (nodeId, itemIndex) => {\r\n    let tempElems = Object.assign([], elementsStateRef.current);\r\n    let tempElemIndex = tempElems.findIndex(t => t.id === nodeId);\r\n    tempElems[tempElemIndex] = {\r\n      ...tempElems[tempElemIndex],\r\n      data: {\r\n        ...tempElems[tempElemIndex]?.data,\r\n        item: (tempElems[tempElemIndex]?.data?.item || []).filter(\r\n          (x, i) => i !== itemIndex\r\n        )\r\n      }\r\n    };\r\n    setElements(tempElems);\r\n    setShowDrawer(null);\r\n  };\r\n\r\n  const handleSwapConditionArrows = nodeId => {\r\n    const tempElements = Object.assign([], elementsStateRef.current);\r\n    const yesNodeIndex = tempElements.findIndex(\r\n      el => el.source === nodeId && el.label === \"yes\"\r\n    );\r\n    const noNodeIndex = tempElements.findIndex(\r\n      el => el.source === nodeId && el.label === \"no\"\r\n    );\r\n    tempElements[yesNodeIndex].label =\r\n      tempElements[yesNodeIndex].label === \"yes\" ? \"no\" : \"yes\";\r\n    tempElements[noNodeIndex].label =\r\n      tempElements[noNodeIndex].label === \"yes\" ? \"no\" : \"yes\";\r\n    setElements(tempElements);\r\n  };\r\n\r\n  const recursionFormObj = (tempElems, nodeId) => {\r\n    let obj = {\r\n      \"Fn::If\": [\r\n        tempElems.find(el => el.id === nodeId).data?.item\r\n          ? [tempElems.find(el => el.id === nodeId).data?.item]\r\n          : []\r\n      ]\r\n    };\r\n\r\n    tempElems = tempElems.filter(\r\n      el => el.target !== nodeId && el.id !== nodeId\r\n    );\r\n\r\n    // condition-yes-action\r\n    const yesNodeId = tempElems.find(\r\n      el => el.source === nodeId && el.label === \"yes\"\r\n    ).target;\r\n    if (tempElems.find(el => el.id === yesNodeId).data?.type === \"condition\") {\r\n      // recursion and return object to be pushed in to second array\r\n      obj[\"Fn::If\"].push([recursionFormObj(tempElems, nodeId)]);\r\n    } else {\r\n      obj[\"Fn::If\"].push(\r\n        tempElems.find(el => el.id === yesNodeId).data?.item || []\r\n      );\r\n    }\r\n    tempElems = tempElems.filter(\r\n      el => el.target !== yesNodeId && el.id !== yesNodeId\r\n    );\r\n\r\n    // condition-no-action\r\n    const noNodeId = tempElems.find(\r\n      el => el.source === nodeId && el.label === \"no\"\r\n    ).target;\r\n    if (tempElems.find(el => el.id === noNodeId).data?.type === \"condition\") {\r\n      // recursion and return object to be pushed in to third array\r\n      obj[\"Fn::If\"].push([recursionFormObj(tempElems, noNodeId)]);\r\n    } else {\r\n      obj[\"Fn::If\"].push(\r\n        tempElems.find(el => el.id === noNodeId).data?.item || []\r\n      );\r\n    }\r\n    tempElems = tempElems.filter(\r\n      el => el.target !== noNodeId && el.id !== noNodeId\r\n    );\r\n\r\n    return obj;\r\n  };\r\n\r\n  const handleSave = () => {\r\n    let tempElems = Object.assign([], elements);\r\n    const output = {\r\n      eventKey: \"\",\r\n      conditions: []\r\n    };\r\n\r\n    // Incomplete flow\r\n    if (\r\n      tempElems.filter(el => el.type === \"btnSelectorNode\" && !el.data.item)\r\n        .length\r\n    ) {\r\n      setModalState({\r\n        title: \"Warning\",\r\n        subtitle: \"Please complete the flow first before saving\",\r\n        btnLabel: \"OK\"\r\n      });\r\n      return;\r\n    }\r\n\r\n    let i = 0;\r\n    while (tempElems.length > 0) {\r\n      let nodeId = tempElems[i].id;\r\n      if (tempElems[i].data?.type === \"event\") {\r\n        output.eventKey = tempElems[i].data?.item?.eventKey;\r\n        tempElems.splice(i, 1);\r\n      } else if (tempElems[i].data?.type === \"condition\") {\r\n        output.conditions.push(recursionFormObj(tempElems, nodeId));\r\n        break;\r\n      } else if (\r\n        tempElems.filter(el => el.type === \"btnSelectorNode\").length === 1 &&\r\n        tempElems[i].data?.type === \"action\"\r\n      ) {\r\n        output.conditions.push({\r\n          \"Fn::If\": [[{ noCondition: true }], tempElems[i].data?.item || [], []]\r\n        });\r\n        // Delete node and edge\r\n        tempElems = tempElems.filter(\r\n          el => el.id !== nodeId && el.target !== nodeId\r\n        );\r\n      } else if (tempElems[i].data?.type === \"choice\") {\r\n        return;\r\n      } else {\r\n        i++;\r\n      }\r\n    }\r\n\r\n    console.log(\"output\", output);\r\n  };\r\n\r\n  const recursionFromElement = (conditionObj, nodeId, position) => {\r\n    return [\r\n      initConditionNodeElement(\r\n        Object.values(conditionObj[0])[0],\r\n        nodeId,\r\n        position\r\n      ), // 2\r\n      initActionNodeElement(conditionObj[2], nodeId + 1, {\r\n        // 3\r\n        x: position.x,\r\n        y: position.y + 400\r\n      }),\r\n      ...(Object.keys(conditionObj[1][0])[0].includes(\"Fn::\")\r\n        ? recursionFromElement(\r\n            Object.values(conditionObj[1][0])[0],\r\n            nodeId + 2, // 4\r\n            {\r\n              x: position.x + 300,\r\n              y: position.y + 150\r\n            }\r\n          )\r\n        : [\r\n            initActionNodeElement(conditionObj[1], nodeId + 2, {\r\n              // 3\r\n              x: position.x + 300,\r\n              y: position.y + 150\r\n            })\r\n          ]),\r\n      initNodeEdge({\r\n        source: nodeId,\r\n        target: Number(nodeId) + 1,\r\n        label: \"yes\"\r\n      }),\r\n      initNodeEdge({\r\n        source: nodeId,\r\n        target: Number(nodeId) + 2,\r\n        label: \"no\"\r\n      })\r\n    ];\r\n  };\r\n\r\n  const handlePreview = () => {\r\n    let nodeId = 1;\r\n    let position = { x: 250, y: 200 };\r\n    let initialElements = [];\r\n    const sampleFlowConditions = Object.assign(\r\n      [],\r\n      SAMPLE_FLOW.conditions[0][\"Fn::If\"]\r\n    );\r\n\r\n    // Event\r\n    initialElements.push(\r\n      initEventNodeElement(\r\n        SAMPLE_EVENT_TRIGGERS.find(t => t.eventKey === SAMPLE_FLOW.eventKey)\r\n      )\r\n    );\r\n\r\n    // Condition + Action\r\n    let i = 0;\r\n    while (i < 3) {\r\n      nodeId += 1;\r\n      if (\r\n        Object.keys(sampleFlowConditions[i]).includes(\"Fn::\") ||\r\n        Object.keys(sampleFlowConditions[i].includes(\"conditionKey\"))\r\n      ) {\r\n        // Condition\r\n        initialElements = [\r\n          ...initialElements,\r\n          ...recursionFromElement(sampleFlowConditions, nodeId, position),\r\n          initNodeEdge({\r\n            source: \"1\",\r\n            target: \"2\"\r\n          })\r\n        ];\r\n        // i += 2 because both yes and no actions for the condition already pushed into array\r\n        // to complete / stop the loop\r\n        i += 2;\r\n      } else if (sampleFlowConditions[i + 1]) {\r\n        // Action\r\n        initialElements.push(\r\n          initActionNodeElement(sampleFlowConditions[i + 1], nodeId, {\r\n            x: 250,\r\n            y: 25\r\n          }),\r\n          initNodeEdge({\r\n            source: (Number(nodeId) - 1).toString(),\r\n            target: nodeId\r\n          })\r\n        );\r\n      }\r\n      i++;\r\n    }\r\n    setElements(initialElements);\r\n  };\r\n\r\n  // Handle lose focus on node to hide drawer\r\n  const handleOnSelectionChange = e => {\r\n    if (!e) {\r\n      setShowDrawer(null);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Background fullHeight color=\"HomePage grey100\">\r\n      {showDrawer && (\r\n        <div className=\"drawer\">\r\n          {showDrawer === \"events\" && (\r\n            <Events\r\n              selectedEventKey={elements[0].data?.item?.eventKey}\r\n              handleSelect={handleEventChange}\r\n            />\r\n          )}\r\n\r\n          {showDrawer === \"conditions\" && (\r\n            <Conditions\r\n              selectedEventKey={elements[0].data?.item?.eventKey}\r\n              selectedConditionObj={\r\n                elementsStateRef.current.find(\r\n                  el => el.id === selectedNodeStateRef.current\r\n                )?.data?.item || {}\r\n              }\r\n              handleSelect={handleConditionChange}\r\n            />\r\n          )}\r\n\r\n          {showDrawer === \"actions\" && (\r\n            <Actions\r\n              actionsArr={\r\n                elementsStateRef.current.find(\r\n                  el => el.id === selectedNodeStateRef.current\r\n                )?.data?.item || []\r\n              }\r\n              selectedActionObj={\r\n                (elementsStateRef.current.find(\r\n                  el => el.id === selectedNodeStateRef.current\r\n                )?.data?.item || [])[selectedActionIndex] || {}\r\n              }\r\n              unavailableActionKeys={unavailableActionKeys}\r\n              handleSelect={handleActionChange}\r\n            />\r\n          )}\r\n        </div>\r\n      )}\r\n\r\n      <div className=\"home-section\">\r\n        <CardHeader\r\n          hasPreviewButton\r\n          handlePreview={handlePreview}\r\n          handleSave={handleSave}\r\n        >\r\n          <Typography variant=\"h3\">Map your automation</Typography>\r\n        </CardHeader>\r\n        <div className=\"flow-body\">\r\n          <ReactFlow\r\n            elementsSelectable={true}\r\n            elements={elements}\r\n            onElementsRemove={onElementsRemove}\r\n            onConnect={onConnect}\r\n            nodeTypes={nodeTypes}\r\n            // deleteKeyCode={46} /* 'delete'-key */\r\n            onSelectionChange={handleOnSelectionChange}\r\n          />\r\n        </div>\r\n      </div>\r\n    </Background>\r\n  );\r\n}\r\n\r\nexport default HomePage;\r\n"],"sourceRoot":""}