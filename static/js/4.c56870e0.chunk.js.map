{"version":3,"sources":["components/common/CardHeader/CardHeader.js","components/common/CardBody/CardBody.js","components/ButtonSelectorNode/ButtonSelectorNode.js","constants/constants.js","views/home/HomePage.js"],"names":["CardHeader","props","handleSave","children","rest","className","IconButton","disableRipple","Button","variant","onClick","CardBody","useState","showMore","setShowMore","listItems","selectedId","onFocusId","handleSelect","length","filter","x","includes","id","map","item","startIcon","name","endIcon","memo","data","isConnectable","selectedElements","useStoreState","store","btnAction","Typography","label","event","disabled","conditions","c","i","Fragment","handleDeleteCondition","actions","a","value","handleDeleteAction","btnLabel","e","stopPropagation","btnLabel2","btnAction2","type","position","style","bottom","top","background","EVENTS","CONDITIONS","ACTIONS","nodeTypes","btnSelectorNode","ButtonSelectorNode","HomePage","showDrawer","setShowDrawer","selectedNode","setSelectedNode","selectedEvent","setSelectedEvent","selectedCondition","setSelectedCondition","selectedAction","setSelectedAction","clickedAction","setClickedAction","initialElements","y","elements","setElements","elementsStateRef","useRef","current","selConditionStateRef","selActionStateRef","nodeId","itemId","tempElems","Object","assign","tempElemIndex","findIndex","t","Background","fullHeight","color","find","push","source","target","TextField","fullWidth","margin","onChange","prev","variatn","nodes","el","outputArr","forEach","node","condition","console","log","elementsSelectable","onElementsRemove","elementsToRemove","els","removeElements","onConnect","params","addEdge","deleteKeyCode"],"mappings":"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","file":"static/js/4.c56870e0.chunk.js","sourcesContent":["import React from \"react\";\r\nimport InfoOutlinedIcon from \"@material-ui/icons/InfoOutlined\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport \"./CardHeader.scss\";\r\n\r\nconst CardHeader = props => {\r\n  const { handleSave, children, ...rest } = props;\r\n  return (\r\n    <div className={`CardHeader`} {...rest}>\r\n      <div className=\"left-section\">\r\n        {children}\r\n        <IconButton disableRipple>\r\n          <InfoOutlinedIcon />\r\n        </IconButton>\r\n      </div>\r\n      {handleSave && (\r\n        <Button variant=\"contained\" onClick={handleSave}>\r\n          Save\r\n        </Button>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport { CardHeader };\r\n","import React, { useState } from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport AddBoxOutlinedIcon from \"@material-ui/icons/AddBoxOutlined\";\r\nimport KeyboardArrowUpOutlinedIcon from \"@material-ui/icons/KeyboardArrowUpOutlined\";\r\nimport KeyboardArrowDownOutlinedIcon from \"@material-ui/icons/KeyboardArrowDownOutlined\";\r\nimport \"./CardBody.scss\";\r\n\r\nconst CardBody = props => {\r\n  const [showMore, setShowMore] = useState(false);\r\n  const { listItems, selectedId, onFocusId, handleSelect, ...rest } = props;\r\n  return (\r\n    <>\r\n      <div\r\n        className={`CardBody ${listItems.length > 3 ? \"has-show-more\" : \"\"} ${\r\n          showMore ? \"show-all\" : \"\"\r\n        }`}\r\n        {...rest}\r\n      >\r\n        {listItems\r\n          .filter(x => !selectedId.includes(x.id))\r\n          .map(item => (\r\n            <Button\r\n              key={item.id}\r\n              onClick={() => handleSelect(item.id)}\r\n              disableRipple\r\n              variant=\"text\"\r\n              className={`btn-card-item ${\r\n                onFocusId === item.id ? \"on-focus\" : \"\"\r\n              }`}\r\n              startIcon={<AddBoxOutlinedIcon />}\r\n            >\r\n              {item.name}\r\n            </Button>\r\n          ))}\r\n      </div>\r\n      {listItems.length > 3 && (\r\n        <div className=\"btn-show-more\">\r\n          <Button\r\n            onClick={() => setShowMore(!showMore)}\r\n            variant=\"text\"\r\n            disableRipple\r\n            endIcon={\r\n              showMore ? (\r\n                <KeyboardArrowUpOutlinedIcon />\r\n              ) : (\r\n                <KeyboardArrowDownOutlinedIcon />\r\n              )\r\n            }\r\n          >\r\n            Show {showMore ? \"less\" : \"more\"}\r\n          </Button>\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport { CardBody };\r\n","import React, { memo } from \"react\";\r\n\r\nimport { Handle, useStoreState } from \"react-flow-renderer\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport HighlightOffIcon from \"@material-ui/icons/HighlightOff\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\n\r\nimport \"./ButtonSelectorNode.scss\";\r\n\r\nexport default memo(({ id, data, isConnectable }) => {\r\n  const selectedElements = useStoreState(store => store.selectedElements);\r\n\r\n  return (\r\n    <div\r\n      className={`ButtonSelectorNode ${\r\n        selectedElements && selectedElements[0].id === id ? \"is-selected\" : \"\"\r\n      }`}\r\n      onClick={() => data.btnAction()}\r\n    >\r\n      <div>\r\n        <Typography variant=\"body1\">{data.label}</Typography>\r\n      </div>\r\n      {data.event && (\r\n        <Button variant=\"contained\" disabled className=\"lbl-event\">\r\n          {data.event.name}\r\n        </Button>\r\n      )}\r\n\r\n      {data.conditions?.length > 0 &&\r\n        data.conditions.map((c, i) => (\r\n          <React.Fragment key={c.id}>\r\n            <div className=\"label-div\">\r\n              <Button variant=\"contained\" disabled className=\"lbl-condition\">\r\n                {c.name}\r\n                {/* {data.conditionLabel.join(\" AND \")} */}\r\n              </Button>\r\n              <IconButton\r\n                disableRipple\r\n                onClick={() => data.handleDeleteCondition(c.id)}\r\n              >\r\n                <HighlightOffIcon />\r\n              </IconButton>\r\n              {i !== data.conditions.length - 1 && (\r\n                <Typography variant=\"h6\">AND</Typography>\r\n              )}\r\n            </div>\r\n          </React.Fragment>\r\n        ))}\r\n\r\n      {data.actions?.length > 0 &&\r\n        data.actions.map((a, i) => (\r\n          <React.Fragment key={a.id}>\r\n            <div className=\"label-div\">\r\n              <Button variant=\"contained\" disabled className=\"lbl-action\">\r\n                {a.name} - {a.value}\r\n                {/* {data.actionLabel.join(\" AND \")} */}\r\n              </Button>\r\n              <IconButton\r\n                disableRipple\r\n                onClick={() => data.handleDeleteAction(a.id)}\r\n              >\r\n                <HighlightOffIcon />\r\n              </IconButton>\r\n              {i !== data.actions.length - 1 && (\r\n                <Typography variant=\"h6\">AND</Typography>\r\n              )}\r\n            </div>\r\n          </React.Fragment>\r\n        ))}\r\n\r\n      {data.btnLabel && (\r\n        <Button\r\n          onClick={e => {\r\n            data.btnAction();\r\n            e.stopPropagation();\r\n          }}\r\n          variant=\"contained\"\r\n        >\r\n          {data.btnLabel}\r\n        </Button>\r\n      )}\r\n\r\n      {data.btnLabel2 && (\r\n        <Button\r\n          onClick={e => {\r\n            data.btnAction2();\r\n            e.stopPropagation();\r\n          }}\r\n          variant=\"contained\"\r\n        >\r\n          {data.btnLabel2}\r\n        </Button>\r\n      )}\r\n\r\n      <Handle\r\n        type=\"source\"\r\n        position=\"bottom\"\r\n        style={{ bottom: 10, top: \"auto\", background: \"#555\" }}\r\n        isConnectable={isConnectable}\r\n      />\r\n    </div>\r\n  );\r\n});\r\n","export const EVENTS = [\r\n  { id: 1, name: \"New order placed\" },\r\n  { id: 2, name: \"New signup\" },\r\n  { id: 3, name: \"New subscriber\" },\r\n  { id: 4, name: \"New cancellation\" }\r\n];\r\n\r\nexport const CONDITIONS = [\r\n  { id: 1, name: \"Amount > 100\" },\r\n  { id: 2, name: \"Amount < 100\" },\r\n  { id: 3, name: \"Product is Coffee\" },\r\n  { id: 4, name: \"Product is Tea\" },\r\n  { id: 5, name: \"Date > Today\" },\r\n  { id: 6, name: \"Date < Today\" }\r\n];\r\nexport const ACTIONS = [\r\n  {\r\n    id: 1,\r\n    name: \"Send email to Contact\",\r\n    type: \"email\",\r\n    label: \"Email address\"\r\n  },\r\n  { id: 2, name: \"Call Contact\", type: \"tel\", label: \"Contact Number\" },\r\n  { id: 3, name: \"Add Tag to Contact\", type: \"tel\", label: \"Contact Number\" },\r\n  { id: 4, name: \"Remove Contact\", type: \"tel\", label: \"Contact Number\" }\r\n];\r\n","import React, { useState, useRef } from \"react\";\r\nimport ReactFlow, { removeElements, addEdge } from \"react-flow-renderer\";\r\n\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport { Background } from \"components/common/Background/Background\";\r\nimport { CardHeader } from \"components/common/CardHeader/CardHeader\";\r\nimport { CardBody } from \"components/common/CardBody/CardBody\";\r\nimport ButtonSelectorNode from \"components/ButtonSelectorNode/ButtonSelectorNode\";\r\n\r\nimport \"./HomePage.scss\";\r\nimport { ACTIONS, CONDITIONS, EVENTS } from \"constants/constants\";\r\n\r\nconst nodeTypes = {\r\n  btnSelectorNode: ButtonSelectorNode\r\n};\r\n\r\nfunction HomePage() {\r\n  const [showDrawer, setShowDrawer] = useState(\"events\");\r\n  const [selectedNode, setSelectedNode] = useState(\"1\");\r\n  const [selectedEvent, setSelectedEvent] = useState([]);\r\n  const [selectedCondition, setSelectedCondition] = useState([]);\r\n  const [selectedAction, setSelectedAction] = useState([]);\r\n  const [clickedAction, setClickedAction] = useState(null);\r\n\r\n  const initialElements = [\r\n    {\r\n      id: \"1\",\r\n      type: \"btnSelectorNode\",\r\n      data: {\r\n        label: \"When\",\r\n        type: \"event\",\r\n        btnLabel: \"Select event trigger\",\r\n        btnAction: () => {\r\n          setShowDrawer(\"events\");\r\n          setSelectedNode(\"1\");\r\n        }\r\n      },\r\n      position: { x: 250, y: 25 }\r\n    }\r\n  ];\r\n  const [elements, setElements] = useState(initialElements);\r\n  const onElementsRemove = elementsToRemove =>\r\n    setElements(els => removeElements(elementsToRemove, els));\r\n  const onConnect = params => setElements(els => addEdge(params, els));\r\n  const elementsStateRef = useRef();\r\n  elementsStateRef.current = elements;\r\n  const selConditionStateRef = useRef();\r\n  selConditionStateRef.current = selectedCondition;\r\n  const selActionStateRef = useRef();\r\n  selActionStateRef.current = selectedCondition;\r\n\r\n  const handleEventChange = id => {\r\n    setSelectedEvent([id]);\r\n    let tempElems = Object.assign([], elements);\r\n    tempElems[0] = {\r\n      id: \"1\",\r\n      type: \"btnSelectorNode\",\r\n      data: {\r\n        label: \"When\",\r\n        type: \"event\",\r\n        event: EVENTS.find(e => e.id === id),\r\n        btnAction: () => {\r\n          setShowDrawer(\"events\");\r\n          setSelectedNode(\"1\");\r\n        }\r\n      },\r\n      position: { x: 250, y: 25 }\r\n    };\r\n\r\n    if (tempElems.length === 1) {\r\n      tempElems.push(\r\n        {\r\n          id: \"2\",\r\n          type: \"btnSelectorNode\",\r\n          data: {\r\n            label: `Next Step`,\r\n            type: \"condition\",\r\n            btnLabel: \"Add condition\",\r\n            btnAction: () => {\r\n              setShowDrawer(\"conditions\");\r\n              setSelectedNode(\"2\");\r\n\r\n              let tempElems = Object.assign([], elementsStateRef.current);\r\n              tempElems = tempElems.filter(\r\n                t => t.id !== \"2\" && t.id !== \"edges-1-2\"\r\n              );\r\n              tempElems.push(\r\n                {\r\n                  id: \"2\",\r\n                  type: \"btnSelectorNode\",\r\n                  data: {\r\n                    label: `If...`,\r\n                    type: \"condition\",\r\n                    btnLabel: \"Add condition\",\r\n                    btnAction: () => {\r\n                      setShowDrawer(\"conditions\");\r\n                      setSelectedNode(\"2\");\r\n                    },\r\n                    handleDeleteCondition: itemId =>\r\n                      handleDeleteCondition(\"2\", itemId)\r\n                  },\r\n                  position: { x: 250, y: 200 }\r\n                },\r\n                {\r\n                  id: \"3\",\r\n                  type: \"btnSelectorNode\",\r\n                  data: {\r\n                    label: `Then...`,\r\n                    type: \"action-yes\",\r\n                    // btnLabel: \"Add condition\",\r\n                    // btnAction: () => {\r\n                    //   setShowDrawer(\"conditions\");\r\n                    //   setSelectedNode(\"3\");\r\n                    // },\r\n                    btnLabel: \"Add action\",\r\n                    btnAction: () => {\r\n                      setShowDrawer(\"actions\");\r\n                      setSelectedNode(\"3\");\r\n                    },\r\n                    handleDeleteAction: itemId =>\r\n                      handleDeleteAction(\"3\", itemId)\r\n                  },\r\n                  position: { x: 250, y: 600 }\r\n                },\r\n                {\r\n                  id: \"4\",\r\n                  type: \"btnSelectorNode\",\r\n                  data: {\r\n                    label: `Then...`,\r\n                    type: \"action-no\",\r\n                    // btnLabel: \"Add condition\",\r\n                    // btnAction: () => {\r\n                    //   setShowDrawer(\"conditions\");\r\n                    //   setSelectedNode(\"4\");\r\n                    // },\r\n                    btnLabel: \"Add action\",\r\n                    btnAction: () => {\r\n                      setShowDrawer(\"actions\");\r\n                      setSelectedNode(\"4\");\r\n                    },\r\n                    handleDeleteAction: itemId =>\r\n                      handleDeleteAction(\"4\", itemId)\r\n                  },\r\n                  position: { x: 500, y: 350 }\r\n                },\r\n                {\r\n                  id: \"edges-1-2\",\r\n                  source: \"1\",\r\n                  target: \"2\",\r\n                  type: \"smoothstep\"\r\n                },\r\n                {\r\n                  id: \"edges-2-3\",\r\n                  source: \"2\",\r\n                  target: \"3\",\r\n                  type: \"smoothstep\",\r\n                  label: \"yes\"\r\n                },\r\n                {\r\n                  id: \"edges-2-4\",\r\n                  source: \"2\",\r\n                  target: \"4\",\r\n                  type: \"smoothstep\",\r\n                  label: \"no\"\r\n                }\r\n              );\r\n              setElements(tempElems);\r\n            },\r\n            btnLabel2: \"Add Action\",\r\n            btnAction2: () => {\r\n              setShowDrawer(\"actions\");\r\n              setSelectedNode(\"2\");\r\n\r\n              let tempElems = Object.assign([], elementsStateRef.current);\r\n              tempElems = tempElems.filter(\r\n                t => t.id !== \"2\" && t.id !== \"edges-1-2\"\r\n              );\r\n              tempElems.push(\r\n                {\r\n                  id: \"2\",\r\n                  type: \"btnSelectorNode\",\r\n                  data: {\r\n                    label: `Then...`,\r\n                    type: \"action\",\r\n                    // btnLabel: \"Add condition\",\r\n                    // btnAction: () => {\r\n                    //   setShowDrawer(\"conditions\");\r\n                    //   setSelectedNode(\"3\");\r\n                    // },\r\n                    btnLabel: \"Add action\",\r\n                    btnAction: () => {\r\n                      setShowDrawer(\"actions\");\r\n                      setSelectedNode(\"2\");\r\n                    },\r\n                    handleDeleteAction: itemId =>\r\n                      handleDeleteAction(\"2\", itemId)\r\n                  },\r\n                  position: { x: 250, y: 200 }\r\n                },\r\n                {\r\n                  id: \"edges-1-2\",\r\n                  source: \"1\",\r\n                  target: \"2\",\r\n                  type: \"smoothstep\"\r\n                }\r\n              );\r\n\r\n              setElements(tempElems);\r\n            },\r\n            handleDeleteCondition: itemId => handleDeleteCondition(\"2\", itemId)\r\n          },\r\n          position: { x: 250, y: 200 }\r\n        },\r\n        {\r\n          id: \"edges-1-2\",\r\n          source: \"1\",\r\n          target: \"2\",\r\n          type: \"smoothstep\"\r\n        }\r\n      );\r\n    }\r\n    setShowDrawer(null);\r\n    setElements(tempElems);\r\n  };\r\n\r\n  const handleConditionChange = id => {\r\n    setSelectedCondition([...selectedCondition, id]);\r\n    let tempElems = Object.assign([], elements);\r\n    let tempElemIndex = tempElems.findIndex(t => t.id === selectedNode);\r\n    tempElems[tempElemIndex] = {\r\n      ...tempElems[tempElemIndex],\r\n      data: {\r\n        ...tempElems[tempElemIndex].data,\r\n        conditions: [\r\n          ...(tempElems[tempElemIndex].data?.conditions || []),\r\n          CONDITIONS.find(e => e.id === id)\r\n        ]\r\n      }\r\n    };\r\n    setElements(tempElems);\r\n  };\r\n\r\n  const handleActionChange = id => {\r\n    setClickedAction(ACTIONS.find(a => a.id === id));\r\n  };\r\n\r\n  const handleAddAction = () => {\r\n    setSelectedAction([...selectedAction, clickedAction.id]);\r\n    let tempElems = Object.assign([], elements);\r\n    let tempElemIndex = tempElems.findIndex(t => t.id === selectedNode);\r\n    tempElems[tempElemIndex] = {\r\n      ...tempElems[tempElemIndex],\r\n      data: {\r\n        ...tempElems[tempElemIndex].data,\r\n        actions: [\r\n          ...(tempElems[tempElemIndex].data?.actions || []),\r\n          clickedAction\r\n        ]\r\n      }\r\n    };\r\n    setElements(tempElems);\r\n  };\r\n\r\n  const handleDeleteCondition = (nodeId, itemId) => {\r\n    let tempElems = Object.assign([], elementsStateRef.current);\r\n    let tempElemIndex = tempElems.findIndex(t => t.id === nodeId);\r\n    tempElems[tempElemIndex] = {\r\n      ...tempElems[tempElemIndex],\r\n      data: {\r\n        ...tempElems[tempElemIndex].data,\r\n        conditions: (tempElems[tempElemIndex].data?.conditions || []).filter(\r\n          t => t.id !== itemId\r\n        )\r\n      }\r\n    };\r\n    setSelectedCondition(\r\n      selConditionStateRef.current.filter(c => c !== itemId)\r\n    );\r\n    setElements(tempElems);\r\n  };\r\n\r\n  const handleDeleteAction = (nodeId, itemId) => {\r\n    let tempElems = Object.assign([], elementsStateRef.current);\r\n    let tempElemIndex = tempElems.findIndex(t => t.id === nodeId);\r\n    tempElems[tempElemIndex] = {\r\n      ...tempElems[tempElemIndex],\r\n      data: {\r\n        ...tempElems[tempElemIndex].data,\r\n        actions: (tempElems[tempElemIndex].data?.actions || []).filter(\r\n          t => t.id !== itemId\r\n        )\r\n      }\r\n    };\r\n    setSelectedAction(selActionStateRef.current.filter(a => a !== itemId));\r\n    setElements(tempElems);\r\n  };\r\n\r\n  const handleSave = () => {\r\n    const nodes = elements.filter(el => el.type === \"btnSelectorNode\");\r\n    const outputArr = [];\r\n    nodes.forEach(node => {\r\n      switch (node.data.type) {\r\n        case \"event\":\r\n          outputArr.push({ event: node.data.event });\r\n          break;\r\n        case \"condition\":\r\n          outputArr.push({ condition: node.data.conditions });\r\n          break;\r\n        case \"action-yes\":\r\n        case \"action-no\":\r\n        case \"action\":\r\n          outputArr.push({ [node.data.type]: [...node.data.actions] });\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    });\r\n    console.log(\"output\", outputArr);\r\n  };\r\n\r\n  return (\r\n    <Background fullHeight color=\"HomePage grey100\">\r\n      {showDrawer && (\r\n        <div className=\"drawer\">\r\n          {showDrawer === \"events\" && (\r\n            <>\r\n              <CardHeader>\r\n                <Typography variant=\"h3\">Events</Typography>\r\n              </CardHeader>\r\n              <CardBody\r\n                listItems={EVENTS}\r\n                selectedId={selectedEvent}\r\n                handleSelect={handleEventChange}\r\n              />\r\n            </>\r\n          )}\r\n\r\n          {showDrawer === \"conditions\" && (\r\n            <>\r\n              <CardHeader>\r\n                <Typography variant=\"h3\">Conditions</Typography>\r\n              </CardHeader>\r\n              <CardBody\r\n                listItems={CONDITIONS}\r\n                selectedId={selectedCondition}\r\n                handleSelect={handleConditionChange}\r\n              />\r\n            </>\r\n          )}\r\n\r\n          {showDrawer === \"actions\" && (\r\n            <>\r\n              <CardHeader>\r\n                <Typography variant=\"h3\">Actions</Typography>\r\n              </CardHeader>\r\n              <CardBody\r\n                listItems={ACTIONS}\r\n                selectedId={selectedAction}\r\n                onFocusId={clickedAction?.id}\r\n                handleSelect={handleActionChange}\r\n              />\r\n              {clickedAction && (\r\n                <>\r\n                  <CardHeader>\r\n                    <Typography variant=\"h3\">Action Details</Typography>\r\n                  </CardHeader>\r\n                  <div className=\"card-body\">\r\n                    <TextField\r\n                      fullWidth\r\n                      margin=\"dense\"\r\n                      onChange={e =>\r\n                        setClickedAction(prev => ({\r\n                          ...prev,\r\n                          value: e.target.value\r\n                        }))\r\n                      }\r\n                      type={clickedAction.type}\r\n                      value={clickedAction.value || \"\"}\r\n                      label={clickedAction.label}\r\n                    />\r\n                    <Button\r\n                      variatn=\"text\"\r\n                      disableRipple\r\n                      onClick={handleAddAction}\r\n                    >\r\n                      Add\r\n                    </Button>\r\n                  </div>\r\n                </>\r\n              )}\r\n            </>\r\n          )}\r\n        </div>\r\n      )}\r\n\r\n      <div className=\"home-section\">\r\n        <CardHeader handleSave={handleSave}>\r\n          <Typography variant=\"h3\">Map your automation</Typography>\r\n        </CardHeader>\r\n        <div className=\"flow-body\">\r\n          <ReactFlow\r\n            elementsSelectable={true}\r\n            elements={elements}\r\n            onElementsRemove={onElementsRemove}\r\n            onConnect={onConnect}\r\n            nodeTypes={nodeTypes}\r\n            deleteKeyCode={46} /* 'delete'-key */\r\n          />\r\n        </div>\r\n      </div>\r\n    </Background>\r\n  );\r\n}\r\n\r\nexport default HomePage;\r\n"],"sourceRoot":""}