{"version":3,"sources":["components/common/CardHeader/CardHeader.js","constants/constants.js","components/sidePanel/Events/Events.js","components/sidePanel/Conditions/Conditions.js","components/sidePanel/Actions/Actions.js","components/ButtonSelectorNode/ButtonSelectorNode.js","views/home/HomePage.js"],"names":["CardHeader","props","handleSave","hasPreviewButton","handlePreview","children","rest","className","IconButton","disableRipple","Button","variant","onClick","SAMPLE_EVENT_TRIGGERS","eventKey","eventDisplay","fields","conditionKey","conditionDisplay","type","options","SAMPLE_ACTIONS","actionKey","actionDisplay","key","placeHolder","option","CONDITION_OPERATORS","name","value","SAMPLE_FLOW","operator","actionInputs","Events","handleSelect","selectedEventKey","useState","showMore","setShowMore","Typography","length","map","item","startIcon","endIcon","Conditions","selectedConditionObj","useEffect","setConditions","Object","keys","includes","values","setMustMeet","initialConditionObj","selectedEventFields","find","t","mustMeet","conditions","handleOnChange","index","keyName","tempConditions","assign","split","FormControl","InputLabel","id","Select","labelId","onChange","e","target","MenuItem","c","i","Fragment","splice","handleOnRemove","f","filter","o","TextField","fullWidth","margin","join","label","FormHelperText","result","Actions","selectedActionObj","handleAddAction","actionsArr","setClickedAction","formatActionInputs","onFocusObj","tempAction","forEach","input","clickedAction","handleFieldInputChange","field","tempClickedAction","fieldIndex","findIndex","opt","placeholder","memo","data","isConnectable","selectedElements","useStoreState","store","focusNodeAction","disabled","btnLabel","btnAction","stopPropagation","handleSwapConditionArrows","cond","replace","a","handleSelectAction","ai","handleDeleteAction","btnLabel2","btnAction2","position","style","bottom","top","background","nodeTypes","btnSelectorNode","ButtonSelectorNode","HomePage","initEventNodeElement","nodeId","x","y","toString","setShowDrawer","setSelectedNode","initConditionNodeElement","initActionNodeElement","setSelectedActionIndex","itemIndex","initChoiceNodeElement","tempElems","elementsStateRef","current","Number","push","initNodeEdge","source","setElements","showDrawer","selectedNode","selectedActionIndex","elements","useRef","selectedNodeStateRef","tempElemIndex","tempElements","yesNodeIndex","el","noNodeIndex","recursionFormObj","obj","yesNodeId","noNodeId","recursionFromElement","conditionObj","Background","fullHeight","color","event","actionObj","slice","initialElements","sampleFlowConditions","output","noCondition","console","log","elementsSelectable","onElementsRemove","elementsToRemove","els","removeElements","onConnect","params","addEdge","onSelectionChange"],"mappings":"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","file":"static/js/4.aaff6eff.chunk.js","sourcesContent":["import React from \"react\";\r\nimport InfoOutlinedIcon from \"@material-ui/icons/InfoOutlined\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\n\r\nimport \"./CardHeader.scss\";\r\n\r\nconst CardHeader = props => {\r\n  const { handleSave, hasPreviewButton, handlePreview, children, ...rest } =\r\n    props;\r\n\r\n  return (\r\n    <div className={`CardHeader`} {...rest}>\r\n      <div className=\"left-section\">\r\n        {children}\r\n        <IconButton disableRipple>\r\n          <InfoOutlinedIcon />\r\n        </IconButton>\r\n      </div>\r\n      <div className=\"d-flex\">\r\n        {hasPreviewButton && (\r\n          <Button\r\n            variant=\"text\"\r\n            className=\"btn-preview\"\r\n            onClick={handlePreview}\r\n          >\r\n            View Preset Flow\r\n          </Button>\r\n        )}\r\n        {handleSave && (\r\n          <Button variant=\"contained\" onClick={handleSave}>\r\n            Save\r\n          </Button>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport { CardHeader };\r\n","export const EVENTS = [\r\n  { id: 1, name: \"New order placed\" },\r\n  { id: 2, name: \"New signup\" },\r\n  { id: 3, name: \"New subscriber\" },\r\n  { id: 4, name: \"New cancellation\" }\r\n];\r\n\r\nexport const CONDITIONS = [\r\n  { id: 1, name: \"Amount > 100\" },\r\n  { id: 2, name: \"Amount < 100\" },\r\n  { id: 3, name: \"Product is Coffee\" },\r\n  { id: 4, name: \"Product is Tea\" },\r\n  { id: 5, name: \"Date > Today\" },\r\n  { id: 6, name: \"Date < Today\" }\r\n];\r\nexport const ACTIONS = [\r\n  {\r\n    id: 1,\r\n    name: \"Send email to Contact\",\r\n    type: \"email\",\r\n    label: \"Email address\"\r\n  },\r\n  { id: 2, name: \"Call Contact\", type: \"tel\", label: \"Contact Number\" },\r\n  { id: 3, name: \"Add Tag to Contact\", type: \"tel\", label: \"Contact Number\" },\r\n  { id: 4, name: \"Remove Contact\", type: \"tel\", label: \"Contact Number\" }\r\n];\r\n\r\nexport const SAMPLE_EVENT_TRIGGERS = [\r\n  {\r\n    eventKey: \"NewOrder\",\r\n    eventDisplay: \"New order placed\",\r\n    fields: [\r\n      {\r\n        conditionKey: \"ProductTitle\",\r\n        conditionDisplay: \"Product Title\",\r\n        type: \"string\"\r\n      },\r\n      {\r\n        conditionKey: \"ProductAmount\",\r\n        conditionDisplay: \"Product Amount\",\r\n        type: \"int\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    eventKey: \"NewSignup\",\r\n    eventDisplay: \"New signup\",\r\n    fields: [\r\n      {\r\n        conditionKey: \"Gender\",\r\n        conditionDisplay: \"Customer Gender\",\r\n        type: \"option\",\r\n        options: [\"Male\", \"Female\"]\r\n      },\r\n      { conditionKey: \"DOB\", conditionDisplay: \"Birthday\", type: \"date\" }\r\n    ]\r\n  }\r\n];\r\n\r\nexport const SAMPLE_ACTIONS = [\r\n  {\r\n    actionKey: \"SendEmail\",\r\n    actionDisplay: \"Send email to contact\",\r\n    fields: [\r\n      { key: \"emailAddress\", placeHolder: \"Email Address\", type: \"string\" }\r\n    ]\r\n  },\r\n  {\r\n    actionKey: \"CallContact\",\r\n    actionDisplay: \"Call contact\",\r\n    fields: [\r\n      { key: \"callContact\", placeHolder: \"Contact Number\", type: \"string\" },\r\n      {\r\n        key: \"callContactCountry\",\r\n        placeHolder: \"Country\",\r\n        type: \"selection\",\r\n        option: [\"Singapore\", \"Malaysia\"]\r\n      }\r\n    ]\r\n  }\r\n];\r\n\r\nexport const CONDITION_OPERATORS = [\r\n  { name: \"Equal\", value: \"=\", type: \"string\" },\r\n  { name: \"Not equal\", value: \"!=\", type: \"string\" },\r\n  { name: \"Contains\", value: \"contains\", type: \"string\" },\r\n  { name: \"Not contains\", value: \"not contains\", type: \"string\" },\r\n  { name: \"Greater than\", value: \">\", type: \"int\" },\r\n  { name: \"Less than\", value: \"<\", type: \"int\" },\r\n  { name: \"Greater and equal than\", value: \">=\", type: \"int\" },\r\n  { name: \"Less and equal than\", value: \"<=\", type: \"int\" },\r\n  { name: \"Equal\", value: \"=\", type: \"date\" },\r\n  { name: \"Earlier than\", value: \"earlier than\", type: \"date\" },\r\n  { name: \"Later than\", value: \"later than\", type: \"date\" }\r\n];\r\n\r\nexport const SAMPLE_FLOW = {\r\n  eventKey: \"NewOrder\",\r\n  conditions: [\r\n    {\r\n      \"Fn::If\": [\r\n        [\r\n          {\r\n            \"Fn::And\": [\r\n              {\r\n                conditionKey: \"ProductTitle\",\r\n                value: [\"coke\", \"pepsi\"],\r\n                operator: \"contains\"\r\n              },\r\n              {\r\n                conditionKey: \"ProductAmount\",\r\n                value: [\"30\"],\r\n                operator: \">=\"\r\n              }\r\n            ]\r\n          }\r\n        ],\r\n        [\r\n          {\r\n            \"Fn::If\": [\r\n              [\r\n                {\r\n                  conditionKey: \"ProductTitle\",\r\n                  value: [\"coke\"],\r\n                  operator: \"=\"\r\n                }\r\n              ],\r\n              [\r\n                {\r\n                  actionKey: \"CallContact\",\r\n                  actionInputs: [\r\n                    {\r\n                      key: \"callContact\",\r\n                      value: \"999\"\r\n                    },\r\n                    {\r\n                      key: \"callContactCountry\",\r\n                      value: \"Singapore\"\r\n                    }\r\n                  ]\r\n                }\r\n              ],\r\n              [\r\n                {\r\n                  actionKey: \"SendEmail\",\r\n                  actionInputs: [\r\n                    {\r\n                      key: \"emailAddress\",\r\n                      value: \"simon@gmail.com\"\r\n                    }\r\n                  ]\r\n                }\r\n              ]\r\n            ]\r\n          }\r\n        ],\r\n        [\r\n          {\r\n            actionKey: \"CallContact\",\r\n            actionInputs: [\r\n              {\r\n                key: \"callContact\",\r\n                value: \"0123456789\"\r\n              },\r\n              {\r\n                key: \"callContactCountry\",\r\n                value: \"Malaysia\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            actionKey: \"SendEmail\",\r\n            actionInputs: [\r\n              {\r\n                key: \"emailAddress\",\r\n                value: \"hello@gmail.com\"\r\n              }\r\n            ]\r\n          }\r\n        ]\r\n      ]\r\n    }\r\n  ]\r\n};\r\n","import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { CardHeader } from \"components/common/CardHeader/CardHeader\";\r\nimport AddBoxOutlinedIcon from \"@material-ui/icons/AddBoxOutlined\";\r\nimport KeyboardArrowUpOutlinedIcon from \"@material-ui/icons/KeyboardArrowUpOutlined\";\r\nimport KeyboardArrowDownOutlinedIcon from \"@material-ui/icons/KeyboardArrowDownOutlined\";\r\nimport { SAMPLE_EVENT_TRIGGERS } from \"constants/constants\";\r\n\r\nimport \"./Events.scss\";\r\n\r\nconst Events = props => {\r\n  const { handleSelect, selectedEventKey, ...rest } = props;\r\n  const [showMore, setShowMore] = useState(false);\r\n\r\n  return (\r\n    <div className={`Events`} {...rest}>\r\n      <CardHeader>\r\n        <Typography variant=\"h3\">Events</Typography>\r\n      </CardHeader>\r\n\r\n      <div\r\n        className={`content-body ${\r\n          SAMPLE_EVENT_TRIGGERS.length > 3 ? \"has-show-more\" : \"\"\r\n        } ${showMore ? \"show-all\" : \"\"}`}\r\n        {...rest}\r\n      >\r\n        {SAMPLE_EVENT_TRIGGERS.map(item => (\r\n          <Button\r\n            key={item.eventKey}\r\n            onClick={() => handleSelect(item)}\r\n            disableRipple\r\n            variant=\"text\"\r\n            className={`btn-card-item ${\r\n              selectedEventKey === item.eventKey ? \"on-focus\" : \"\"\r\n            }`}\r\n            startIcon={<AddBoxOutlinedIcon />}\r\n          >\r\n            {item.eventDisplay}\r\n          </Button>\r\n        ))}\r\n      </div>\r\n\r\n      {SAMPLE_EVENT_TRIGGERS.length > 3 && (\r\n        <div className=\"btn-show-more\">\r\n          <Button\r\n            onClick={() => setShowMore(!showMore)}\r\n            variant=\"text\"\r\n            disableRipple\r\n            endIcon={\r\n              showMore ? (\r\n                <KeyboardArrowUpOutlinedIcon />\r\n              ) : (\r\n                <KeyboardArrowDownOutlinedIcon />\r\n              )\r\n            }\r\n          >\r\n            Show {showMore ? \"less\" : \"more\"}\r\n          </Button>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nEvents.propTypes = {\r\n  selectedEventKey: PropTypes.string,\r\n  handleSelect: PropTypes.func\r\n};\r\nexport { Events };\r\n","import React, { useState, useEffect } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport FormHelperText from \"@material-ui/core/FormHelperText\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport ClearIcon from \"@material-ui/icons/Clear\";\r\nimport AddBoxOutlinedIcon from \"@material-ui/icons/AddBoxOutlined\";\r\nimport { CardHeader } from \"components/common/CardHeader/CardHeader\";\r\nimport {\r\n  SAMPLE_EVENT_TRIGGERS,\r\n  CONDITION_OPERATORS\r\n} from \"constants/constants\";\r\n\r\nimport \"./Conditions.scss\";\r\n\r\nconst Conditions = props => {\r\n  const { selectedEventKey, selectedConditionObj, handleSelect, ...rest } =\r\n    props;\r\n\r\n  useEffect(() => {\r\n    setConditions(\r\n      Object.keys(selectedConditionObj)[0]?.includes(\"Fn::\")\r\n        ? Object.values(selectedConditionObj)[0]\r\n        : [\r\n            {\r\n              conditionKey: selectedConditionObj.conditionKey || \"\",\r\n              value: selectedConditionObj.value || [],\r\n              operator: selectedConditionObj.operator || \"\"\r\n            }\r\n          ]\r\n    );\r\n    setMustMeet(\r\n      Object.keys(selectedConditionObj)[0]?.includes(\"Fn::\")\r\n        ? Object.keys(selectedConditionObj)[0]\r\n        : \"\"\r\n    );\r\n  }, [selectedConditionObj]);\r\n\r\n  const initialConditionObj = {\r\n    conditionKey: \"\",\r\n    value: [],\r\n    operator: \"\"\r\n  };\r\n\r\n  const selectedEventFields = SAMPLE_EVENT_TRIGGERS.find(\r\n    t => t.eventKey === selectedEventKey\r\n  ).fields;\r\n\r\n  const [mustMeet, setMustMeet] = useState(\"\");\r\n  const [conditions, setConditions] = useState([\r\n    {\r\n      conditionKey: \"\",\r\n      value: [],\r\n      operator: \"\"\r\n    }\r\n  ]);\r\n\r\n  const handleOnAdd = () => {\r\n    if (!mustMeet) {\r\n      setMustMeet(\"Fn::And\");\r\n    }\r\n    setConditions([...conditions, initialConditionObj]);\r\n  };\r\n\r\n  const handleOnSave = () => {\r\n    const result = mustMeet ? { [mustMeet]: conditions } : conditions[0];\r\n    handleSelect(result);\r\n  };\r\n\r\n  const handleOnRemove = index => {\r\n    if (conditions.length === 2) {\r\n      setMustMeet(\"\");\r\n    }\r\n    const tempConditions = Object.assign([], conditions);\r\n    tempConditions.splice(index, 1);\r\n    setConditions(tempConditions);\r\n  };\r\n\r\n  const handleOnChange = (value, index, keyName) => {\r\n    const tempConditions = Object.assign([], conditions);\r\n    if (keyName === \"value\") {\r\n      tempConditions[index].value = value.split(\",\");\r\n    } else {\r\n      tempConditions[index][keyName] = value;\r\n    }\r\n    setConditions(tempConditions);\r\n  };\r\n\r\n  return (\r\n    <div className={`Conditions`} {...rest}>\r\n      <CardHeader>\r\n        <Typography variant=\"h3\">Conditions</Typography>\r\n      </CardHeader>\r\n\r\n      <div className={`content-body`} {...rest}>\r\n        {conditions.length > 1 && (\r\n          <FormControl className=\"mb-1-5\">\r\n            <InputLabel id={`label-must-meet`}>\r\n              All conditions must meet\r\n            </InputLabel>\r\n            <Select\r\n              labelId={`label-must-meet`}\r\n              id=\"must-meet\"\r\n              value={mustMeet}\r\n              onChange={e => setMustMeet(e.target.value)}\r\n            >\r\n              <MenuItem value=\"Fn::And\">AND</MenuItem>\r\n              <MenuItem value=\"Fn::Or\">OR</MenuItem>\r\n            </Select>\r\n          </FormControl>\r\n        )}\r\n\r\n        {conditions.map((c, i) => (\r\n          <React.Fragment key={i}>\r\n            {i !== 0 && (\r\n              <Button\r\n                className=\"btn-clear\"\r\n                variant=\"text\"\r\n                startIcon={<ClearIcon />}\r\n                disableRipple\r\n                onClick={() => handleOnRemove(i)}\r\n              >\r\n                Remove\r\n              </Button>\r\n            )}\r\n            <FormControl>\r\n              <InputLabel id={`label-condition-${i}`}>\r\n                Condition {i + 1}\r\n              </InputLabel>\r\n              <Select\r\n                labelId={`label-condition-${i}`}\r\n                id={`condition-${i}`}\r\n                value={c.conditionKey || \"\"}\r\n                onChange={e =>\r\n                  handleOnChange(e.target.value, i, \"conditionKey\")\r\n                }\r\n              >\r\n                {selectedEventFields.map(item => (\r\n                  <MenuItem key={item.conditionKey} value={item.conditionKey}>\r\n                    {item.conditionDisplay}\r\n                  </MenuItem>\r\n                ))}\r\n              </Select>\r\n            </FormControl>\r\n\r\n            <FormControl>\r\n              <InputLabel id={`label-operator-${i}`}>\r\n                Operator {i + 1}\r\n              </InputLabel>\r\n              <Select\r\n                labelId={`label-operator-${i}`}\r\n                id={`operator-${i}`}\r\n                value={c.operator || \"\"}\r\n                onChange={e => handleOnChange(e.target.value, i, \"operator\")}\r\n              >\r\n                {selectedEventFields.find(\r\n                  f => f.conditionKey === c.conditionKey\r\n                )?.type === \"option\"\r\n                  ? selectedEventFields\r\n                      .find(f => f.conditionKey === c.conditionKey)\r\n                      .options.map(option => (\r\n                        <MenuItem key={option} value={option}>\r\n                          {option}\r\n                        </MenuItem>\r\n                      ))\r\n                  : CONDITION_OPERATORS.filter(\r\n                      o =>\r\n                        o.type ===\r\n                        selectedEventFields.find(\r\n                          f => f.conditionKey === c.conditionKey\r\n                        )?.type\r\n                    )?.map(operator => (\r\n                      <MenuItem key={operator.value} value={operator.value}>\r\n                        {operator.name}\r\n                      </MenuItem>\r\n                    ))}\r\n              </Select>\r\n            </FormControl>\r\n\r\n            <FormControl>\r\n              <TextField\r\n                fullWidth\r\n                margin=\"dense\"\r\n                onChange={e => handleOnChange(e.target.value, i, \"value\")}\r\n                type={\"text\"}\r\n                value={c.value.join(\",\") || \"\"}\r\n                label={`Value ${i + 1}`}\r\n              />\r\n              <FormHelperText>\r\n                Please separate multiple values by comma\r\n              </FormHelperText>\r\n            </FormControl>\r\n\r\n            {conditions.length - 1 !== i && (\r\n              <Typography variant=\"h6\" className=\"must-meet-separator\">\r\n                {mustMeet === \"Fn::And\" ? \"AND\" : \"OR\"}\r\n              </Typography>\r\n            )}\r\n          </React.Fragment>\r\n        ))}\r\n\r\n        <Button\r\n          variant=\"text\"\r\n          startIcon={<AddBoxOutlinedIcon />}\r\n          disableRipple\r\n          className=\"btn-add\"\r\n          onClick={handleOnAdd}\r\n        >\r\n          Add Condition\r\n        </Button>\r\n        <Button variant=\"contained\" disableRipple onClick={handleOnSave}>\r\n          Save Condition\r\n        </Button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nConditions.propTypes = {\r\n  selectedEventKey: PropTypes.string,\r\n  selectedConditionObj: PropTypes.object,\r\n  handleSelect: PropTypes.func\r\n};\r\nexport { Conditions };\r\n","import React, { useState, useEffect } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport { CardHeader } from \"components/common/CardHeader/CardHeader\";\r\nimport AddBoxOutlinedIcon from \"@material-ui/icons/AddBoxOutlined\";\r\nimport KeyboardArrowUpOutlinedIcon from \"@material-ui/icons/KeyboardArrowUpOutlined\";\r\nimport KeyboardArrowDownOutlinedIcon from \"@material-ui/icons/KeyboardArrowDownOutlined\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport { SAMPLE_ACTIONS } from \"constants/constants\";\r\n\r\nimport \"./Actions.scss\";\r\n\r\nconst Actions = props => {\r\n  const {\r\n    handleSelect,\r\n    handleAddAction,\r\n    actionsArr,\r\n    selectedActionObj,\r\n    ...rest\r\n  } = props;\r\n\r\n  useEffect(() => {\r\n    if (Object.keys(selectedActionObj).length) {\r\n      setClickedAction(formatActionInputs(selectedActionObj));\r\n    } else {\r\n      setClickedAction({});\r\n    }\r\n  }, [selectedActionObj]);\r\n\r\n  const formatActionInputs = onFocusObj => {\r\n    const tempAction = Object.assign(\r\n      {},\r\n      SAMPLE_ACTIONS.find(f => f.actionKey === onFocusObj.actionKey)\r\n    );\r\n    tempAction.fields?.forEach(f => {\r\n      f.value = onFocusObj.actionInputs.find(\r\n        input => input.key === f.key\r\n      )?.value;\r\n    });\r\n    return tempAction;\r\n  };\r\n\r\n  const [clickedAction, setClickedAction] = useState({});\r\n  const [showMore, setShowMore] = useState(false);\r\n\r\n  const handleOnClickAction = action => {\r\n    setClickedAction(action);\r\n  };\r\n\r\n  const handleOnAddOrUpdate = () => {\r\n    const result = {\r\n      actionKey: clickedAction.actionKey,\r\n      actionInputs: clickedAction.fields.map(f => ({\r\n        key: f.key,\r\n        value: f.value\r\n      }))\r\n    };\r\n    handleSelect(\r\n      result,\r\n      Object.keys(selectedActionObj).length ? \"update\" : \"add\"\r\n    );\r\n  };\r\n\r\n  const handleFieldInputChange = (e, field) => {\r\n    const tempClickedAction = Object.assign({}, clickedAction);\r\n    const fieldIndex = clickedAction.fields.findIndex(f => f.key === field.key);\r\n    tempClickedAction.fields[fieldIndex].value = e.target.value;\r\n    setClickedAction(tempClickedAction);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className={`Actions`} {...rest}>\r\n        <CardHeader>\r\n          <Typography variant=\"h3\">Actions</Typography>\r\n        </CardHeader>\r\n\r\n        <div\r\n          className={`content-body ${\r\n            SAMPLE_ACTIONS.length > 3 ? \"has-show-more\" : \"\"\r\n          } ${showMore ? \"show-all\" : \"\"}`}\r\n          {...rest}\r\n        >\r\n          {SAMPLE_ACTIONS.map(item => (\r\n            <Button\r\n              key={item.actionKey}\r\n              onClick={() => handleOnClickAction(item)}\r\n              disableRipple\r\n              variant=\"text\"\r\n              className={`btn-card-item ${\r\n                clickedAction?.actionKey === item.actionKey ? \"on-focus\" : \"\"\r\n              }`}\r\n              startIcon={<AddBoxOutlinedIcon />}\r\n            >\r\n              {item.actionDisplay}\r\n            </Button>\r\n          ))}\r\n        </div>\r\n\r\n        {SAMPLE_ACTIONS.length > 3 && (\r\n          <div className=\"btn-show-more\">\r\n            <Button\r\n              onClick={() => setShowMore(!showMore)}\r\n              variant=\"text\"\r\n              disableRipple\r\n              endIcon={\r\n                showMore ? (\r\n                  <KeyboardArrowUpOutlinedIcon />\r\n                ) : (\r\n                  <KeyboardArrowDownOutlinedIcon />\r\n                )\r\n              }\r\n            >\r\n              Show {showMore ? \"less\" : \"more\"}\r\n            </Button>\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n      {Object.keys(clickedAction).length > 0 && (\r\n        <>\r\n          <CardHeader>\r\n            <Typography variant=\"h3\">Action Details</Typography>\r\n          </CardHeader>\r\n          <div className=\"card-body\">\r\n            {clickedAction.fields.map(field =>\r\n              field.type === \"selection\" ? (\r\n                <FormControl key={field.key}>\r\n                  <InputLabel id={`label-${field.key}`}>\r\n                    {field.placeHolder}\r\n                  </InputLabel>\r\n                  <Select\r\n                    labelId={`label-${field.key}`}\r\n                    id={field.key}\r\n                    value={field.value || \"\"}\r\n                    onChange={e => handleFieldInputChange(e, field)}\r\n                  >\r\n                    {field.option.map(opt => (\r\n                      <MenuItem key={opt} value={opt}>\r\n                        {opt}\r\n                      </MenuItem>\r\n                    ))}\r\n                  </Select>\r\n                </FormControl>\r\n              ) : (\r\n                <TextField\r\n                  key={field.key}\r\n                  fullWidth\r\n                  margin=\"dense\"\r\n                  onChange={e => handleFieldInputChange(e, field)}\r\n                  type={\"text\"}\r\n                  value={field.value || \"\"}\r\n                  label={field.placeHolder}\r\n                  placeholder={field.placeHolder}\r\n                />\r\n              )\r\n            )}\r\n            <Button variant=\"text\" disableRipple onClick={handleOnAddOrUpdate}>\r\n              {Object.keys(selectedActionObj).length ? \"Update\" : \"Add\"}\r\n            </Button>\r\n          </div>\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nActions.propTypes = {\r\n  handleSelect: PropTypes.func,\r\n  handleAddAction: PropTypes.func,\r\n  actionsArr: PropTypes.array,\r\n  selectedActionObj: PropTypes.object\r\n};\r\nexport { Actions };\r\n","import React, { memo } from \"react\";\r\n\r\nimport { Handle, useStoreState } from \"react-flow-renderer\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport HighlightOffIcon from \"@material-ui/icons/HighlightOff\";\r\nimport LoopIcon from \"@material-ui/icons/Loop\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\n\r\nimport \"./ButtonSelectorNode.scss\";\r\n\r\nexport default memo(({ id, data, isConnectable }) => {\r\n  const selectedElements = useStoreState(store => store.selectedElements);\r\n\r\n  return (\r\n    <div\r\n      className={`ButtonSelectorNode ${\r\n        selectedElements && selectedElements[0].id === id ? \"is-selected\" : \"\"\r\n      }`}\r\n      onClick={() => data.focusNodeAction(id)}\r\n    >\r\n      <div>\r\n        <Typography variant=\"body1\">{data.label}</Typography>\r\n      </div>\r\n\r\n      {/* Event type */}\r\n      {data.type === \"event\" &&\r\n        (data.item ? (\r\n          <Button variant=\"contained\" disabled className=\"lbl-event\">\r\n            {data.item?.eventDisplay}\r\n          </Button>\r\n        ) : (\r\n          data.btnLabel && (\r\n            <Button\r\n              onClick={e => {\r\n                data.btnAction(id);\r\n                e.stopPropagation();\r\n              }}\r\n              variant=\"contained\"\r\n            >\r\n              {data.btnLabel}\r\n            </Button>\r\n          )\r\n        ))}\r\n\r\n      {/* Condition or Choice type */}\r\n      {(data.type === \"condition\" || data.type === \"choice\") && (\r\n        <>\r\n          {data.type === \"condition\" && (\r\n            <IconButton\r\n              disableRipple\r\n              className=\"btn-swap\"\r\n              onClick={e => {\r\n                data.handleSwapConditionArrows(id);\r\n                e.stopPropagation();\r\n              }}\r\n            >\r\n              <LoopIcon />\r\n            </IconButton>\r\n          )}\r\n          {data.item ? (\r\n            <Button variant=\"contained\" disabled className=\"lbl-condition\">\r\n              {Object.keys(data.item)[0].includes(\"Fn::\")\r\n                ? Object.values(data.item)[0]\r\n                    .map(\r\n                      cond =>\r\n                        `${cond.conditionKey} ${\r\n                          cond.operator\r\n                        } ${cond.value.join(\", \")}`\r\n                    )\r\n                    .join(` ${Object.keys(data.item)[0].replace(\"Fn::\", \"\")} `)\r\n                : `${data.item.conditionKey} ${\r\n                    data.item.operator\r\n                  } ${data.item.value.join(\", \")}`}\r\n            </Button>\r\n          ) : (\r\n            data.btnLabel && (\r\n              <Button\r\n                onClick={e => {\r\n                  data.btnAction(id);\r\n                  e.stopPropagation();\r\n                }}\r\n                variant=\"contained\"\r\n              >\r\n                {data.btnLabel}\r\n              </Button>\r\n            )\r\n          )}\r\n        </>\r\n      )}\r\n\r\n      {/* Action Type */}\r\n      {data.type === \"action\" &&\r\n        (data.item?.length\r\n          ? data.item.map((a, i) => (\r\n              <React.Fragment key={i}>\r\n                <div className=\"label-div\">\r\n                  <Button\r\n                    variant=\"contained\"\r\n                    onClick={e => {\r\n                      data.handleSelectAction(id, i);\r\n                      e.stopPropagation();\r\n                    }}\r\n                    className=\"lbl-action\"\r\n                  >\r\n                    {`Action: ${a.actionKey}\r\n                    ${a.actionInputs\r\n                      .map(ai => `${ai.key} - ${ai.value}`)\r\n                      .join(\", \")}`}\r\n                  </Button>\r\n                  <IconButton\r\n                    disableRipple\r\n                    onClick={e => {\r\n                      data.handleDeleteAction(id, i);\r\n                      e.stopPropagation();\r\n                    }}\r\n                  >\r\n                    <HighlightOffIcon />\r\n                  </IconButton>\r\n                  {i !== data.item.length - 1 && (\r\n                    <Typography variant=\"h6\">AND</Typography>\r\n                  )}\r\n                </div>\r\n              </React.Fragment>\r\n            ))\r\n          : data.btnLabel && (\r\n              <Button\r\n                onClick={e => {\r\n                  data.btnAction(id);\r\n                  e.stopPropagation();\r\n                }}\r\n                variant=\"contained\"\r\n              >\r\n                {data.btnLabel}\r\n              </Button>\r\n            ))}\r\n\r\n      {data.type === \"choice\" && (\r\n        <Typography variant=\"h6\" className=\"text-or\">\r\n          OR\r\n        </Typography>\r\n      )}\r\n\r\n      {data.btnLabel2 && (\r\n        <Button\r\n          onClick={e => {\r\n            data.btnAction2(id);\r\n            e.stopPropagation();\r\n          }}\r\n          variant=\"contained\"\r\n        >\r\n          {data.btnLabel2}\r\n        </Button>\r\n      )}\r\n\r\n      <Handle\r\n        type=\"source\"\r\n        position=\"bottom\"\r\n        style={{ bottom: 10, top: \"auto\", background: \"#555\" }}\r\n        isConnectable={isConnectable}\r\n      />\r\n    </div>\r\n  );\r\n});\r\n","import React, { useState, useRef } from \"react\";\r\nimport ReactFlow, { removeElements, addEdge } from \"react-flow-renderer\";\r\n\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { Events } from \"components/sidePanel/Events/Events\";\r\nimport { Conditions } from \"components/sidePanel/Conditions/Conditions\";\r\nimport { Actions } from \"components/sidePanel/Actions/Actions\";\r\nimport { Background } from \"components/common/Background/Background\";\r\nimport { CardHeader } from \"components/common/CardHeader/CardHeader\";\r\nimport ButtonSelectorNode from \"components/ButtonSelectorNode/ButtonSelectorNode\";\r\nimport { SAMPLE_EVENT_TRIGGERS, SAMPLE_FLOW } from \"constants/constants\";\r\n\r\nimport \"./HomePage.scss\";\r\n\r\nconst nodeTypes = {\r\n  btnSelectorNode: ButtonSelectorNode\r\n};\r\n\r\nfunction HomePage() {\r\n  const initEventNodeElement = (\r\n    item,\r\n    nodeId = 1,\r\n    position = { x: 250, y: 25 }\r\n  ) => ({\r\n    id: nodeId.toString(),\r\n    position,\r\n    type: \"btnSelectorNode\",\r\n    data: {\r\n      item,\r\n      type: \"event\",\r\n      label: \"When\",\r\n      btnLabel: \"Select Event Trigger\",\r\n      focusNodeAction: id => {\r\n        setShowDrawer(\"events\");\r\n        setSelectedNode(id);\r\n      },\r\n      btnAction: id => {\r\n        setShowDrawer(\"events\");\r\n        setSelectedNode(id);\r\n      }\r\n    }\r\n  });\r\n\r\n  const initConditionNodeElement = (\r\n    item,\r\n    nodeId = 1,\r\n    position = { x: 250, y: 25 }\r\n  ) => ({\r\n    id: nodeId.toString(),\r\n    position,\r\n    type: \"btnSelectorNode\",\r\n    data: {\r\n      item,\r\n      type: \"condition\",\r\n      label: \"If...\",\r\n      btnLabel: \"Add condition\",\r\n      focusNodeAction: id => {\r\n        setShowDrawer(\"conditions\");\r\n        setSelectedNode(id);\r\n      },\r\n      handleSwapConditionArrows: id => handleSwapConditionArrows(id),\r\n      btnAction: id => {\r\n        setShowDrawer(\"conditions\");\r\n        setSelectedNode(id);\r\n      }\r\n    }\r\n  });\r\n\r\n  const initActionNodeElement = (\r\n    item,\r\n    nodeId = 1,\r\n    position = { x: 250, y: 25 }\r\n  ) => ({\r\n    id: nodeId.toString(),\r\n    position,\r\n    type: \"btnSelectorNode\",\r\n    data: {\r\n      item,\r\n      type: \"action\",\r\n      label: \"Then...\",\r\n      btnLabel: \"Add action\",\r\n      focusNodeAction: id => {\r\n        setShowDrawer(\"actions\");\r\n        setSelectedActionIndex(null);\r\n        setSelectedNode(id);\r\n      },\r\n      btnAction: id => {\r\n        setShowDrawer(\"actions\");\r\n        setSelectedNode(id);\r\n      },\r\n      handleSelectAction: (id, itemIndex) => {\r\n        setShowDrawer(\"actions\");\r\n        setSelectedNode(id);\r\n        handleSelectAction(itemIndex);\r\n      },\r\n      handleDeleteAction: (id, itemIndex) => {\r\n        setSelectedNode(id);\r\n        handleDeleteAction(itemIndex);\r\n      }\r\n    }\r\n  });\r\n\r\n  const initChoiceNodeElement = (nodeId = 1, position = { x: 250, y: 25 }) => ({\r\n    id: nodeId.toString(),\r\n    position,\r\n    type: \"btnSelectorNode\",\r\n    data: {\r\n      type: \"choice\",\r\n      label: \"Next Step\",\r\n      btnLabel: \"Add condition\",\r\n      btnLabel2: \"Add action\",\r\n      focusNodeAction: id => {\r\n        setShowDrawer(null);\r\n        setSelectedNode(id);\r\n      },\r\n      btnAction: id => {\r\n        setShowDrawer(\"conditions\");\r\n        setSelectedNode(id);\r\n\r\n        let tempElems = Object.assign([], elementsStateRef.current);\r\n        tempElems = tempElems.filter(\r\n          t =>\r\n            t.id !== nodeId &&\r\n            t.id !== `edges-${(Number(nodeId) - 1).toString()}-${nodeId}`\r\n        );\r\n        tempElems.push(\r\n          initConditionNodeElement(null, nodeId, position), // 2\r\n          initActionNodeElement(null, Number(nodeId) + 1, {\r\n            // 3 = yes\r\n            x: position.x,\r\n            y: position.y + 400\r\n          }),\r\n          initChoiceNodeElement((Number(nodeId) + 2).toString(), {\r\n            x: position.x + 300,\r\n            y: position.y + 150\r\n          }),\r\n          ...(nodeId === \"2\"\r\n            ? [\r\n                initNodeEdge({\r\n                  source: (Number(nodeId) - 1).toString(),\r\n                  target: nodeId\r\n                })\r\n              ]\r\n            : []),\r\n          initNodeEdge({\r\n            source: nodeId,\r\n            target: (Number(nodeId) + 1).toString(), // edges-2-3\r\n            label: \"yes\"\r\n          }),\r\n          initNodeEdge({\r\n            source: nodeId,\r\n            target: (Number(nodeId) + 2).toString(), // edges-2-4\r\n            label: \"no\"\r\n          })\r\n        );\r\n        setElements(tempElems);\r\n      },\r\n      btnAction2: id => {\r\n        setShowDrawer(\"actions\");\r\n        setSelectedNode(id);\r\n\r\n        let tempElems = Object.assign([], elementsStateRef.current);\r\n        tempElems = tempElems.filter(\r\n          t =>\r\n            t.id !== nodeId &&\r\n            t.id !== `edges-${(Number(nodeId) - 1).toString()}-${nodeId}` // edges-1-2\r\n        );\r\n        tempElems.push(\r\n          initActionNodeElement(null, nodeId, position),\r\n          ...(nodeId === \"2\"\r\n            ? [\r\n                initNodeEdge({\r\n                  source: (Number(nodeId) - 1).toString(),\r\n                  target: nodeId\r\n                })\r\n              ]\r\n            : [])\r\n        );\r\n\r\n        setElements(tempElems);\r\n      }\r\n    }\r\n  });\r\n\r\n  const initNodeEdge = ({ source, target, label }) => ({\r\n    id: `edges-${source}-${target}`, // edges-1-2\r\n    source: source.toString(),\r\n    target: target.toString(),\r\n    type: \"smoothstep\",\r\n    label\r\n  });\r\n\r\n  const [flow, setFlow] = useState({});\r\n  const [showDrawer, setShowDrawer] = useState(\"events\");\r\n  const [selectedNode, setSelectedNode] = useState(\"1\");\r\n  const [selectedActionIndex, setSelectedActionIndex] = useState(null);\r\n  const [elements, setElements] = useState([initEventNodeElement()]);\r\n  const onElementsRemove = elementsToRemove =>\r\n    setElements(els => removeElements(elementsToRemove, els));\r\n  const onConnect = params => setElements(els => addEdge(params, els));\r\n\r\n  const elementsStateRef = useRef();\r\n  elementsStateRef.current = elements;\r\n  const selectedNodeStateRef = useRef();\r\n  selectedNodeStateRef.current = selectedNode;\r\n\r\n  const handleEventChange = event => {\r\n    // setFlow({ ...flow, eventKey: event.eventKey });\r\n    let tempElems = Object.assign([], elementsStateRef.current);\r\n    tempElems[0] = initEventNodeElement(event);\r\n\r\n    if (tempElems.length === 1) {\r\n      tempElems.push(\r\n        initChoiceNodeElement(\"2\", { x: 250, y: 200 }),\r\n        initNodeEdge({\r\n          source: \"1\",\r\n          target: \"2\"\r\n        })\r\n      );\r\n    }\r\n    setShowDrawer(null);\r\n    setElements(tempElems);\r\n  };\r\n\r\n  const handleConditionChange = conditionObj => {\r\n    let tempElems = Object.assign([], elementsStateRef.current);\r\n    let tempElemIndex = tempElems.findIndex(\r\n      t => t.id === selectedNodeStateRef.current\r\n    );\r\n    tempElems[tempElemIndex] = {\r\n      ...tempElems[tempElemIndex],\r\n      data: {\r\n        ...tempElems[tempElemIndex]?.data,\r\n        item: conditionObj\r\n      }\r\n    };\r\n    setElements(tempElems);\r\n  };\r\n\r\n  // type = add / update\r\n  const handleActionChange = (actionObj, type) => {\r\n    let tempElems = Object.assign([], elementsStateRef.current);\r\n    let tempElemIndex = tempElems.findIndex(\r\n      t => t.id === selectedNodeStateRef.current\r\n    );\r\n    tempElems[tempElemIndex] = {\r\n      ...tempElems[tempElemIndex],\r\n      data: {\r\n        ...tempElems[tempElemIndex]?.data,\r\n        item:\r\n          type === \"update\"\r\n            ? [\r\n                ...tempElems[tempElemIndex]?.data?.item.slice(\r\n                  0,\r\n                  selectedActionIndex\r\n                ),\r\n                actionObj,\r\n                ...tempElems[tempElemIndex]?.data?.item.slice(\r\n                  selectedActionIndex + 1\r\n                )\r\n              ]\r\n            : [...(tempElems[tempElemIndex]?.data?.item || []), actionObj]\r\n      }\r\n    };\r\n    setElements(tempElems);\r\n  };\r\n\r\n  const handleSelectAction = itemIndex => {\r\n    setSelectedActionIndex(itemIndex);\r\n  };\r\n\r\n  const handleDeleteAction = itemIndex => {\r\n    let tempElems = Object.assign([], elementsStateRef.current);\r\n    let tempElemIndex = tempElems.findIndex(\r\n      t => t.id === selectedNodeStateRef.current\r\n    );\r\n    tempElems[tempElemIndex] = {\r\n      ...tempElems[tempElemIndex],\r\n      data: {\r\n        ...tempElems[tempElemIndex]?.data,\r\n        item: (tempElems[tempElemIndex]?.data?.item || []).filter(\r\n          (x, i) => i !== itemIndex\r\n        )\r\n      }\r\n    };\r\n    setElements(tempElems);\r\n    setShowDrawer(null);\r\n  };\r\n\r\n  const handleSwapConditionArrows = nodeId => {\r\n    const tempElements = Object.assign([], elementsStateRef.current);\r\n    const yesNodeIndex = tempElements.findIndex(\r\n      el => el.source === nodeId && el.label === \"yes\"\r\n    );\r\n    const noNodeIndex = tempElements.findIndex(\r\n      el => el.source === nodeId && el.label === \"no\"\r\n    );\r\n    tempElements[yesNodeIndex].label =\r\n      tempElements[yesNodeIndex].label === \"yes\" ? \"no\" : \"yes\";\r\n    tempElements[noNodeIndex].label =\r\n      tempElements[noNodeIndex].label === \"yes\" ? \"no\" : \"yes\";\r\n    setElements(tempElements);\r\n  };\r\n\r\n  const recursionFormObj = (tempElems, nodeId) => {\r\n    let obj = {\r\n      \"Fn::If\": [\r\n        tempElems.find(el => el.id === nodeId).data?.item\r\n          ? [tempElems.find(el => el.id === nodeId).data?.item]\r\n          : []\r\n      ]\r\n    };\r\n\r\n    tempElems = tempElems.filter(\r\n      el => el.target !== nodeId && el.id !== nodeId\r\n    );\r\n\r\n    // condition-yes-action\r\n    const yesNodeId = tempElems.find(\r\n      el => el.source === nodeId && el.label === \"yes\"\r\n    ).target;\r\n    if (tempElems.find(el => el.id === yesNodeId).data?.type === \"condition\") {\r\n      // recursion and return object to be pushed in to second array\r\n      obj[\"Fn::If\"].push([recursionFormObj(tempElems, nodeId)]);\r\n    } else {\r\n      obj[\"Fn::If\"].push(\r\n        tempElems.find(el => el.id === yesNodeId).data?.item || []\r\n      );\r\n    }\r\n    tempElems = tempElems.filter(\r\n      el => el.target !== yesNodeId && el.id !== yesNodeId\r\n    );\r\n\r\n    // condition-no-action\r\n    const noNodeId = tempElems.find(\r\n      el => el.source === nodeId && el.label === \"no\"\r\n    ).target;\r\n    if (tempElems.find(el => el.id === noNodeId).data?.type === \"condition\") {\r\n      // recursion and return object to be pushed in to third array\r\n      obj[\"Fn::If\"].push([recursionFormObj(tempElems, noNodeId)]);\r\n    } else {\r\n      obj[\"Fn::If\"].push(\r\n        tempElems.find(el => el.id === noNodeId).data?.item || []\r\n      );\r\n    }\r\n    tempElems = tempElems.filter(\r\n      el => el.target !== noNodeId && el.id !== noNodeId\r\n    );\r\n\r\n    return obj;\r\n  };\r\n\r\n  const handleSave = () => {\r\n    let tempElems = Object.assign([], elements);\r\n    const output = {\r\n      eventKey: \"\",\r\n      conditions: []\r\n    };\r\n\r\n    let i = 0;\r\n    while (tempElems.length > 0) {\r\n      let nodeId = tempElems[i].id;\r\n      if (tempElems[i].data?.type === \"event\") {\r\n        output.eventKey = tempElems[i].data?.item?.eventKey;\r\n        tempElems.splice(i, 1);\r\n      } else if (tempElems[i].data?.type === \"condition\") {\r\n        output.conditions.push(recursionFormObj(tempElems, nodeId));\r\n        break;\r\n      } else if (\r\n        tempElems.filter(el => el.type === \"btnSelectorNode\").length === 1 &&\r\n        tempElems[i].data?.type === \"action\"\r\n      ) {\r\n        output.conditions.push({\r\n          \"Fn::If\": [[{ noCondition: true }], tempElems[i].data?.item || [], []]\r\n        });\r\n        // Delete node and edge\r\n        tempElems = tempElems.filter(\r\n          el => el.id !== nodeId && el.target !== nodeId\r\n        );\r\n      } else {\r\n        i++;\r\n      }\r\n    }\r\n\r\n    console.log(\"output\", output);\r\n  };\r\n\r\n  const recursionFromElement = (conditionObj, nodeId, position) => {\r\n    return [\r\n      initConditionNodeElement(\r\n        Object.values(conditionObj[0])[0],\r\n        nodeId,\r\n        position\r\n      ), // 2\r\n      initActionNodeElement(conditionObj[2], nodeId + 1, {\r\n        // 3\r\n        x: position.x,\r\n        y: position.y + 400\r\n      }),\r\n      ...(Object.keys(conditionObj[1][0])[0].includes(\"Fn::\")\r\n        ? recursionFromElement(\r\n            Object.values(conditionObj[1][0])[0],\r\n            nodeId + 2, // 4\r\n            {\r\n              x: position.x + 300,\r\n              y: position.y + 150\r\n            }\r\n          )\r\n        : [\r\n            initActionNodeElement(conditionObj[1], nodeId + 2, {\r\n              // 3\r\n              x: position.x + 300,\r\n              y: position.y + 150\r\n            })\r\n          ]),\r\n      initNodeEdge({\r\n        source: nodeId,\r\n        target: Number(nodeId) + 1,\r\n        label: \"yes\"\r\n      }),\r\n      initNodeEdge({\r\n        source: nodeId,\r\n        target: Number(nodeId) + 2,\r\n        label: \"no\"\r\n      })\r\n    ];\r\n  };\r\n\r\n  const handlePreview = () => {\r\n    let nodeId = 1;\r\n    let position = { x: 250, y: 200 };\r\n    let initialElements = [];\r\n    const sampleFlowConditions = Object.assign(\r\n      [],\r\n      SAMPLE_FLOW.conditions[0][\"Fn::If\"]\r\n    );\r\n\r\n    // Event\r\n    initialElements.push(\r\n      initEventNodeElement(\r\n        SAMPLE_EVENT_TRIGGERS.find(t => t.eventKey === SAMPLE_FLOW.eventKey)\r\n      )\r\n    );\r\n\r\n    // Condition + Action\r\n    let i = 0;\r\n    while (i < 3) {\r\n      nodeId += 1;\r\n      if (\r\n        Object.keys(sampleFlowConditions[i]).includes(\"Fn::\") ||\r\n        Object.keys(sampleFlowConditions[i].includes(\"conditionKey\"))\r\n      ) {\r\n        // Condition\r\n        initialElements = [\r\n          ...initialElements,\r\n          ...recursionFromElement(sampleFlowConditions, nodeId, position),\r\n          initNodeEdge({\r\n            source: \"1\",\r\n            target: \"2\"\r\n          })\r\n        ];\r\n        // i += 2 because both yes and no actions for the condition already pushed into array\r\n        // to complete / stop the loop\r\n        i += 2;\r\n      } else if (sampleFlowConditions[i + 1]) {\r\n        // Action\r\n        initialElements.push(\r\n          initActionNodeElement(sampleFlowConditions[i + 1], nodeId, {\r\n            x: 250,\r\n            y: 25\r\n          }),\r\n          initNodeEdge({\r\n            source: (Number(nodeId) - 1).toString(),\r\n            target: nodeId\r\n          })\r\n        );\r\n      }\r\n      i++;\r\n    }\r\n    setElements(initialElements);\r\n  };\r\n\r\n  // Handle lose focus on node to hide drawer\r\n  const handleOnSelectionChange = e => {\r\n    if (!e) {\r\n      setShowDrawer(null);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Background fullHeight color=\"HomePage grey100\">\r\n      {showDrawer && (\r\n        <div className=\"drawer\">\r\n          {showDrawer === \"events\" && (\r\n            <Events\r\n              selectedEventKey={elements[0].data?.item?.eventKey}\r\n              handleSelect={handleEventChange}\r\n            />\r\n          )}\r\n\r\n          {showDrawer === \"conditions\" && (\r\n            <Conditions\r\n              selectedEventKey={elements[0].data?.item?.eventKey}\r\n              selectedConditionObj={\r\n                elementsStateRef.current.find(\r\n                  el => el.id === selectedNodeStateRef.current\r\n                )?.data?.item || {}\r\n              }\r\n              handleSelect={handleConditionChange}\r\n            />\r\n          )}\r\n\r\n          {showDrawer === \"actions\" && (\r\n            <Actions\r\n              actionsArr={\r\n                elementsStateRef.current.find(\r\n                  el => el.id === selectedNodeStateRef.current\r\n                )?.data?.item || []\r\n              }\r\n              selectedActionObj={\r\n                (elementsStateRef.current.find(\r\n                  el => el.id === selectedNodeStateRef.current\r\n                )?.data?.item || [])[selectedActionIndex] || {}\r\n              }\r\n              handleSelect={handleActionChange}\r\n            />\r\n          )}\r\n        </div>\r\n      )}\r\n\r\n      <div className=\"home-section\">\r\n        <CardHeader\r\n          hasPreviewButton\r\n          handlePreview={handlePreview}\r\n          handleSave={handleSave}\r\n        >\r\n          <Typography variant=\"h3\">Map your automation</Typography>\r\n        </CardHeader>\r\n        <div className=\"flow-body\">\r\n          <ReactFlow\r\n            elementsSelectable={true}\r\n            elements={elements}\r\n            onElementsRemove={onElementsRemove}\r\n            onConnect={onConnect}\r\n            nodeTypes={nodeTypes}\r\n            // deleteKeyCode={46} /* 'delete'-key */\r\n            onSelectionChange={handleOnSelectionChange}\r\n          />\r\n        </div>\r\n      </div>\r\n    </Background>\r\n  );\r\n}\r\n\r\nexport default HomePage;\r\n"],"sourceRoot":""}